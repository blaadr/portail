// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package basf.i0_import_selligent_mails_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: i0_import_selligent_mails Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.0.1.20150908_1633
 * @status 
 */
public class i0_import_selligent_mails implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (PATH_ftp != null) {

				this.setProperty("PATH_ftp", PATH_ftp.toString());

			}

			if (PATH_arch != null) {

				this.setProperty("PATH_arch", PATH_arch.toString());

			}

		}

		public String PATH_ftp;

		public String getPATH_ftp() {
			return this.PATH_ftp;
		}

		public String PATH_arch;

		public String getPATH_arch() {
			return this.PATH_arch;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "i0_import_selligent_mails";
	private final String projectName = "BASF";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	LogCatcherUtils talendLogs_LOGS = new LogCatcherUtils();

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					i0_import_selligent_mails.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(i0_import_selligent_mails.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						talendLogs_LOGS.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						talendLogs_LOGSProcess(globalMap);
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void preStaLogCon_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		preStaLogCon_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileList_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileArchive_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tFileArchive_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileList_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tFileList_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tFileList_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void connectionStatsLogs_Commit_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		connectionStatsLogs_Commit_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void connectionStatsLogs_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		connectionStatsLogs_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendLogs_LOGS_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		talendLogs_DB_error(exception, errorComponent, globalMap);

	}

	public void talendLogs_DB_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		talendLogs_CONSOLE_error(exception, errorComponent, globalMap);

	}

	public void talendLogs_CONSOLE_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
	}

	public void preStaLogCon_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileList_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "ERROR", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

		try {

			errorCode = null;
			tWarn_8Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void tWarn_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_7_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileArchive_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "ERROR", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

		try {

			errorCode = null;
			tWarn_10Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void tWarn_9_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileList_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "ERROR", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

		try {

			errorCode = null;
			tWarn_12Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void tWarn_11_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_13_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_12_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_10_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_8_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void connectionStatsLogs_Commit_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void connectionStatsLogs_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void talendLogs_LOGS_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void preStaLogConProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("preStaLogCon_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [preStaLogCon begin ] start
				 */

				ok_Hash.put("preStaLogCon", false);
				start_Hash.put("preStaLogCon", System.currentTimeMillis());

				currentComponent = "preStaLogCon";

				int tos_count_preStaLogCon = 0;

				/**
				 * [preStaLogCon begin ] stop
				 */

				/**
				 * [preStaLogCon main ] start
				 */

				currentComponent = "preStaLogCon";

				tos_count_preStaLogCon++;

				/**
				 * [preStaLogCon main ] stop
				 */

				/**
				 * [preStaLogCon end ] start
				 */

				currentComponent = "preStaLogCon";

				ok_Hash.put("preStaLogCon", true);
				end_Hash.put("preStaLogCon", System.currentTimeMillis());

				connectionStatsLogsProcess(globalMap);

				/**
				 * [preStaLogCon end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [preStaLogCon finally ] start
				 */

				currentComponent = "preStaLogCon";

				/**
				 * [preStaLogCon finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("preStaLogCon_SUBPROCESS_STATE", 1);
	}

	public void tWarn_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWarn_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tWarn_1 begin ] start
				 */

				ok_Hash.put("tWarn_1", false);
				start_Hash.put("tWarn_1", System.currentTimeMillis());

				currentComponent = "tWarn_1";

				int tos_count_tWarn_1 = 0;

				/**
				 * [tWarn_1 begin ] stop
				 */

				/**
				 * [tWarn_1 main ] start
				 */

				currentComponent = "tWarn_1";

				resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_1", "", Thread
						.currentThread().getId() + "", "TRACE", "",
						"----debutdejob----", "", "");
				talendLogs_LOGS.addMessage("tWarn", "tWarn_1", 1,
						"----debutdejob----", -1);
				talendLogs_LOGSProcess(globalMap);
				globalMap.put("tWarn_1_WARN_MESSAGES", "----debutdejob----");
				globalMap.put("tWarn_1_WARN_PRIORITY", 1);
				globalMap.put("tWarn_1_WARN_CODE", -1);

				tos_count_tWarn_1++;

				/**
				 * [tWarn_1 main ] stop
				 */

				/**
				 * [tWarn_1 end ] start
				 */

				currentComponent = "tWarn_1";

				ok_Hash.put("tWarn_1", true);
				end_Hash.put("tWarn_1", System.currentTimeMillis());

				tFileList_1Process(globalMap);

				/**
				 * [tWarn_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_1 finally ] start
				 */

				currentComponent = "tWarn_1";

				/**
				 * [tWarn_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_1_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_BASF_i0_import_selligent_mails = new byte[0];
		static byte[] commonByteArray_BASF_i0_import_selligent_mails = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		public Integer MAILTREEID;

		public Integer getMAILTREEID() {
			return this.MAILTREEID;
		}

		public Integer TEMPLATE;

		public Integer getTEMPLATE() {
			return this.TEMPLATE;
		}

		public Integer TEMPLATEID;

		public Integer getTEMPLATEID() {
			return this.TEMPLATEID;
		}

		public String TYPE;

		public String getTYPE() {
			return this.TYPE;
		}

		public java.util.Date CREATED_DT;

		public java.util.Date getCREATED_DT() {
			return this.CREATED_DT;
		}

		public java.util.Date MODIFIED_DT;

		public java.util.Date getMODIFIED_DT() {
			return this.MODIFIED_DT;
		}

		public Integer LISTID;

		public Integer getLISTID() {
			return this.LISTID;
		}

		public Integer OWNERID;

		public Integer getOWNERID() {
			return this.OWNERID;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.ID != other.ID)
				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.ID = this.ID;
			other.NAME = this.NAME;
			other.MAILTREEID = this.MAILTREEID;
			other.TEMPLATE = this.TEMPLATE;
			other.TEMPLATEID = this.TEMPLATEID;
			other.TYPE = this.TYPE;
			other.CREATED_DT = this.CREATED_DT;
			other.MODIFIED_DT = this.MODIFIED_DT;
			other.LISTID = this.LISTID;
			other.OWNERID = this.OWNERID;
			other.errorCode = this.errorCode;
			other.errorMessage = this.errorMessage;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.ID = this.ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASF_i0_import_selligent_mails.length) {
					if (length < 1024
							&& commonByteArray_BASF_i0_import_selligent_mails.length == 0) {
						commonByteArray_BASF_i0_import_selligent_mails = new byte[1024];
					} else {
						commonByteArray_BASF_i0_import_selligent_mails = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BASF_i0_import_selligent_mails,
						0, length);
				strReturn = new String(
						commonByteArray_BASF_i0_import_selligent_mails, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BASF_i0_import_selligent_mails) {

				try {

					int length = 0;

					this.ID = dis.readInt();

					this.NAME = readString(dis);

					this.MAILTREEID = readInteger(dis);

					this.TEMPLATE = readInteger(dis);

					this.TEMPLATEID = readInteger(dis);

					this.TYPE = readString(dis);

					this.CREATED_DT = readDate(dis);

					this.MODIFIED_DT = readDate(dis);

					this.LISTID = readInteger(dis);

					this.OWNERID = readInteger(dis);

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID);

				// String

				writeString(this.NAME, dos);

				// Integer

				writeInteger(this.MAILTREEID, dos);

				// Integer

				writeInteger(this.TEMPLATE, dos);

				// Integer

				writeInteger(this.TEMPLATEID, dos);

				// String

				writeString(this.TYPE, dos);

				// java.util.Date

				writeDate(this.CREATED_DT, dos);

				// java.util.Date

				writeDate(this.MODIFIED_DT, dos);

				// Integer

				writeInteger(this.LISTID, dos);

				// Integer

				writeInteger(this.OWNERID, dos);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",NAME=" + NAME);
			sb.append(",MAILTREEID=" + String.valueOf(MAILTREEID));
			sb.append(",TEMPLATE=" + String.valueOf(TEMPLATE));
			sb.append(",TEMPLATEID=" + String.valueOf(TEMPLATEID));
			sb.append(",TYPE=" + TYPE);
			sb.append(",CREATED_DT=" + String.valueOf(CREATED_DT));
			sb.append(",MODIFIED_DT=" + String.valueOf(MODIFIED_DT));
			sb.append(",LISTID=" + String.valueOf(LISTID));
			sb.append(",OWNERID=" + String.valueOf(OWNERID));
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_BASF_i0_import_selligent_mails = new byte[0];
		static byte[] commonByteArray_BASF_i0_import_selligent_mails = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		public Integer MAILTREEID;

		public Integer getMAILTREEID() {
			return this.MAILTREEID;
		}

		public Integer TEMPLATE;

		public Integer getTEMPLATE() {
			return this.TEMPLATE;
		}

		public Integer TEMPLATEID;

		public Integer getTEMPLATEID() {
			return this.TEMPLATEID;
		}

		public String TYPE;

		public String getTYPE() {
			return this.TYPE;
		}

		public java.util.Date CREATED_DT;

		public java.util.Date getCREATED_DT() {
			return this.CREATED_DT;
		}

		public java.util.Date MODIFIED_DT;

		public java.util.Date getMODIFIED_DT() {
			return this.MODIFIED_DT;
		}

		public Integer LISTID;

		public Integer getLISTID() {
			return this.LISTID;
		}

		public Integer OWNERID;

		public Integer getOWNERID() {
			return this.OWNERID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.ID != other.ID)
				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.ID = this.ID;
			other.NAME = this.NAME;
			other.MAILTREEID = this.MAILTREEID;
			other.TEMPLATE = this.TEMPLATE;
			other.TEMPLATEID = this.TEMPLATEID;
			other.TYPE = this.TYPE;
			other.CREATED_DT = this.CREATED_DT;
			other.MODIFIED_DT = this.MODIFIED_DT;
			other.LISTID = this.LISTID;
			other.OWNERID = this.OWNERID;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.ID = this.ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASF_i0_import_selligent_mails.length) {
					if (length < 1024
							&& commonByteArray_BASF_i0_import_selligent_mails.length == 0) {
						commonByteArray_BASF_i0_import_selligent_mails = new byte[1024];
					} else {
						commonByteArray_BASF_i0_import_selligent_mails = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BASF_i0_import_selligent_mails,
						0, length);
				strReturn = new String(
						commonByteArray_BASF_i0_import_selligent_mails, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BASF_i0_import_selligent_mails) {

				try {

					int length = 0;

					this.ID = dis.readInt();

					this.NAME = readString(dis);

					this.MAILTREEID = readInteger(dis);

					this.TEMPLATE = readInteger(dis);

					this.TEMPLATEID = readInteger(dis);

					this.TYPE = readString(dis);

					this.CREATED_DT = readDate(dis);

					this.MODIFIED_DT = readDate(dis);

					this.LISTID = readInteger(dis);

					this.OWNERID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID);

				// String

				writeString(this.NAME, dos);

				// Integer

				writeInteger(this.MAILTREEID, dos);

				// Integer

				writeInteger(this.TEMPLATE, dos);

				// Integer

				writeInteger(this.TEMPLATEID, dos);

				// String

				writeString(this.TYPE, dos);

				// java.util.Date

				writeDate(this.CREATED_DT, dos);

				// java.util.Date

				writeDate(this.MODIFIED_DT, dos);

				// Integer

				writeInteger(this.LISTID, dos);

				// Integer

				writeInteger(this.OWNERID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",NAME=" + NAME);
			sb.append(",MAILTREEID=" + String.valueOf(MAILTREEID));
			sb.append(",TEMPLATE=" + String.valueOf(TEMPLATE));
			sb.append(",TEMPLATEID=" + String.valueOf(TEMPLATEID));
			sb.append(",TYPE=" + TYPE);
			sb.append(",CREATED_DT=" + String.valueOf(CREATED_DT));
			sb.append(",MODIFIED_DT=" + String.valueOf(MODIFIED_DT));
			sb.append(",LISTID=" + String.valueOf(LISTID));
			sb.append(",OWNERID=" + String.valueOf(OWNERID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_BASF_i0_import_selligent_mails = new byte[0];
		static byte[] commonByteArray_BASF_i0_import_selligent_mails = new byte[0];

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		public Integer MAILTREEID;

		public Integer getMAILTREEID() {
			return this.MAILTREEID;
		}

		public Integer TEMPLATE;

		public Integer getTEMPLATE() {
			return this.TEMPLATE;
		}

		public Integer TEMPLATEID;

		public Integer getTEMPLATEID() {
			return this.TEMPLATEID;
		}

		public String TYPE;

		public String getTYPE() {
			return this.TYPE;
		}

		public java.util.Date CREATED_DT;

		public java.util.Date getCREATED_DT() {
			return this.CREATED_DT;
		}

		public java.util.Date MODIFIED_DT;

		public java.util.Date getMODIFIED_DT() {
			return this.MODIFIED_DT;
		}

		public Integer LISTID;

		public Integer getLISTID() {
			return this.LISTID;
		}

		public Integer OWNERID;

		public Integer getOWNERID() {
			return this.OWNERID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASF_i0_import_selligent_mails.length) {
					if (length < 1024
							&& commonByteArray_BASF_i0_import_selligent_mails.length == 0) {
						commonByteArray_BASF_i0_import_selligent_mails = new byte[1024];
					} else {
						commonByteArray_BASF_i0_import_selligent_mails = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BASF_i0_import_selligent_mails,
						0, length);
				strReturn = new String(
						commonByteArray_BASF_i0_import_selligent_mails, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BASF_i0_import_selligent_mails) {

				try {

					int length = 0;

					this.ID = dis.readInt();

					this.NAME = readString(dis);

					this.MAILTREEID = readInteger(dis);

					this.TEMPLATE = readInteger(dis);

					this.TEMPLATEID = readInteger(dis);

					this.TYPE = readString(dis);

					this.CREATED_DT = readDate(dis);

					this.MODIFIED_DT = readDate(dis);

					this.LISTID = readInteger(dis);

					this.OWNERID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID);

				// String

				writeString(this.NAME, dos);

				// Integer

				writeInteger(this.MAILTREEID, dos);

				// Integer

				writeInteger(this.TEMPLATE, dos);

				// Integer

				writeInteger(this.TEMPLATEID, dos);

				// String

				writeString(this.TYPE, dos);

				// java.util.Date

				writeDate(this.CREATED_DT, dos);

				// java.util.Date

				writeDate(this.MODIFIED_DT, dos);

				// Integer

				writeInteger(this.LISTID, dos);

				// Integer

				writeInteger(this.OWNERID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",NAME=" + NAME);
			sb.append(",MAILTREEID=" + String.valueOf(MAILTREEID));
			sb.append(",TEMPLATE=" + String.valueOf(TEMPLATE));
			sb.append(",TEMPLATEID=" + String.valueOf(TEMPLATEID));
			sb.append(",TYPE=" + TYPE);
			sb.append(",CREATED_DT=" + String.valueOf(CREATED_DT));
			sb.append(",MODIFIED_DT=" + String.valueOf(MODIFIED_DT));
			sb.append(",LISTID=" + String.valueOf(LISTID));
			sb.append(",OWNERID=" + String.valueOf(OWNERID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_BASF_i0_import_selligent_mails = new byte[0];
		static byte[] commonByteArray_BASF_i0_import_selligent_mails = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		public Integer MAILTREEID;

		public Integer getMAILTREEID() {
			return this.MAILTREEID;
		}

		public Integer TEMPLATE;

		public Integer getTEMPLATE() {
			return this.TEMPLATE;
		}

		public Integer TEMPLATEID;

		public Integer getTEMPLATEID() {
			return this.TEMPLATEID;
		}

		public String TYPE;

		public String getTYPE() {
			return this.TYPE;
		}

		public java.util.Date CREATED_DT;

		public java.util.Date getCREATED_DT() {
			return this.CREATED_DT;
		}

		public java.util.Date MODIFIED_DT;

		public java.util.Date getMODIFIED_DT() {
			return this.MODIFIED_DT;
		}

		public Integer LISTID;

		public Integer getLISTID() {
			return this.LISTID;
		}

		public Integer OWNERID;

		public Integer getOWNERID() {
			return this.OWNERID;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.ID != other.ID)
				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.ID = this.ID;
			other.NAME = this.NAME;
			other.MAILTREEID = this.MAILTREEID;
			other.TEMPLATE = this.TEMPLATE;
			other.TEMPLATEID = this.TEMPLATEID;
			other.TYPE = this.TYPE;
			other.CREATED_DT = this.CREATED_DT;
			other.MODIFIED_DT = this.MODIFIED_DT;
			other.LISTID = this.LISTID;
			other.OWNERID = this.OWNERID;
			other.errorCode = this.errorCode;
			other.errorMessage = this.errorMessage;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.ID = this.ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASF_i0_import_selligent_mails.length) {
					if (length < 1024
							&& commonByteArray_BASF_i0_import_selligent_mails.length == 0) {
						commonByteArray_BASF_i0_import_selligent_mails = new byte[1024];
					} else {
						commonByteArray_BASF_i0_import_selligent_mails = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BASF_i0_import_selligent_mails,
						0, length);
				strReturn = new String(
						commonByteArray_BASF_i0_import_selligent_mails, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BASF_i0_import_selligent_mails) {

				try {

					int length = 0;

					this.ID = dis.readInt();

					this.NAME = readString(dis);

					this.MAILTREEID = readInteger(dis);

					this.TEMPLATE = readInteger(dis);

					this.TEMPLATEID = readInteger(dis);

					this.TYPE = readString(dis);

					this.CREATED_DT = readDate(dis);

					this.MODIFIED_DT = readDate(dis);

					this.LISTID = readInteger(dis);

					this.OWNERID = readInteger(dis);

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID);

				// String

				writeString(this.NAME, dos);

				// Integer

				writeInteger(this.MAILTREEID, dos);

				// Integer

				writeInteger(this.TEMPLATE, dos);

				// Integer

				writeInteger(this.TEMPLATEID, dos);

				// String

				writeString(this.TYPE, dos);

				// java.util.Date

				writeDate(this.CREATED_DT, dos);

				// java.util.Date

				writeDate(this.MODIFIED_DT, dos);

				// Integer

				writeInteger(this.LISTID, dos);

				// Integer

				writeInteger(this.OWNERID, dos);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",NAME=" + NAME);
			sb.append(",MAILTREEID=" + String.valueOf(MAILTREEID));
			sb.append(",TEMPLATE=" + String.valueOf(TEMPLATE));
			sb.append(",TEMPLATEID=" + String.valueOf(TEMPLATEID));
			sb.append(",TYPE=" + TYPE);
			sb.append(",CREATED_DT=" + String.valueOf(CREATED_DT));
			sb.append(",MODIFIED_DT=" + String.valueOf(MODIFIED_DT));
			sb.append(",LISTID=" + String.valueOf(LISTID));
			sb.append(",OWNERID=" + String.valueOf(OWNERID));
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileList_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileList_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();
				row4Struct row4 = new row4Struct();
				row3Struct row3 = new row3Struct();

				/**
				 * [tFileList_1 begin ] start
				 */

				int NB_ITERATE_tFileInputDelimited_1 = 0; // for statistics

				ok_Hash.put("tFileList_1", false);
				start_Hash.put("tFileList_1", System.currentTimeMillis());

				currentComponent = "tFileList_1";

				int tos_count_tFileList_1 = 0;

				String directory_tFileList_1 = context.PATH_ftp;
				final java.util.List<String> maskList_tFileList_1 = new java.util.ArrayList<String>();
				final java.util.List<java.util.regex.Pattern> patternList_tFileList_1 = new java.util.ArrayList<java.util.regex.Pattern>();
				maskList_tFileList_1.add("BASF_selligent_mails_*.txt");
				for (final String filemask_tFileList_1 : maskList_tFileList_1) {
					String filemask_compile_tFileList_1 = filemask_tFileList_1;

					filemask_compile_tFileList_1 = org.apache.oro.text.GlobCompiler
							.globToPerl5(
									filemask_tFileList_1.toCharArray(),
									org.apache.oro.text.GlobCompiler.DEFAULT_MASK);

					java.util.regex.Pattern fileNamePattern_tFileList_1 = java.util.regex.Pattern
							.compile(filemask_compile_tFileList_1);
					patternList_tFileList_1.add(fileNamePattern_tFileList_1);
				}
				int NB_FILEtFileList_1 = 0;

				final boolean case_sensitive_tFileList_1 = true;
				final java.util.List<java.io.File> list_tFileList_1 = new java.util.ArrayList<java.io.File>();
				final java.util.Set<String> filePath_tFileList_1 = new java.util.HashSet<String>();
				java.io.File file_tFileList_1 = new java.io.File(
						directory_tFileList_1);

				file_tFileList_1.listFiles(new java.io.FilenameFilter() {
					public boolean accept(java.io.File dir, String name) {
						java.io.File file = new java.io.File(dir, name);
						if (!file.isDirectory()) {

							String fileName_tFileList_1 = file.getName();
							for (final java.util.regex.Pattern fileNamePattern_tFileList_1 : patternList_tFileList_1) {
								if (fileNamePattern_tFileList_1.matcher(
										fileName_tFileList_1).matches()) {
									if (!filePath_tFileList_1.contains(file
											.getAbsolutePath())) {
										list_tFileList_1.add(file);
										filePath_tFileList_1.add(file
												.getAbsolutePath());
									}
								}
							}
						}
						return true;
					}
				});
				java.util.Collections.sort(list_tFileList_1);

				for (int i_tFileList_1 = 0; i_tFileList_1 < list_tFileList_1
						.size(); i_tFileList_1++) {
					java.io.File files_tFileList_1 = list_tFileList_1
							.get(i_tFileList_1);
					String fileName_tFileList_1 = files_tFileList_1.getName();

					String currentFileName_tFileList_1 = files_tFileList_1
							.getName();
					String currentFilePath_tFileList_1 = files_tFileList_1
							.getAbsolutePath();
					String currentFileDirectory_tFileList_1 = files_tFileList_1
							.getParent();
					String currentFileExtension_tFileList_1 = null;

					if (files_tFileList_1.getName().contains(".")
							&& files_tFileList_1.isFile()) {
						currentFileExtension_tFileList_1 = files_tFileList_1
								.getName().substring(
										files_tFileList_1.getName()
												.lastIndexOf(".") + 1);
					} else {
						currentFileExtension_tFileList_1 = "";
					}

					NB_FILEtFileList_1++;
					globalMap.put("tFileList_1_CURRENT_FILE",
							currentFileName_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEPATH",
							currentFilePath_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEDIRECTORY",
							currentFileDirectory_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEEXTENSION",
							currentFileExtension_tFileList_1);
					globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);

					/**
					 * [tFileList_1 begin ] stop
					 */

					/**
					 * [tFileList_1 main ] start
					 */

					currentComponent = "tFileList_1";

					tos_count_tFileList_1++;

					/**
					 * [tFileList_1 main ] stop
					 */
					NB_ITERATE_tFileInputDelimited_1++;

					/**
					 * [tFileOutputDelimited_2 begin ] start
					 */

					ok_Hash.put("tFileOutputDelimited_2", false);
					start_Hash.put("tFileOutputDelimited_2",
							System.currentTimeMillis());

					currentComponent = "tFileOutputDelimited_2";

					int tos_count_tFileOutputDelimited_2 = 0;

					String fileName_tFileOutputDelimited_2 = "";
					fileName_tFileOutputDelimited_2 = (new java.io.File(
							((String) globalMap
									.get("tFileList_1_CURRENT_FILEPATH"))
									+ ".bdd.bad")).getAbsolutePath().replace(
							"\\", "/");
					String fullName_tFileOutputDelimited_2 = null;
					String extension_tFileOutputDelimited_2 = null;
					String directory_tFileOutputDelimited_2 = null;
					if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
						if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
								.lastIndexOf("/")) {
							fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
							extension_tFileOutputDelimited_2 = "";
						} else {
							fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
									.substring(0,
											fileName_tFileOutputDelimited_2
													.lastIndexOf("."));
							extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
									.substring(fileName_tFileOutputDelimited_2
											.lastIndexOf("."));
						}
						directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("/"));
					} else {
						if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
							fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
									.substring(0,
											fileName_tFileOutputDelimited_2
													.lastIndexOf("."));
							extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
									.substring(fileName_tFileOutputDelimited_2
											.lastIndexOf("."));
						} else {
							fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
							extension_tFileOutputDelimited_2 = "";
						}
						directory_tFileOutputDelimited_2 = "";
					}
					boolean isFileGenerated_tFileOutputDelimited_2 = true;
					java.io.File filetFileOutputDelimited_2 = new java.io.File(
							fileName_tFileOutputDelimited_2);
					globalMap.put("tFileOutputDelimited_2_FILE_NAME",
							fileName_tFileOutputDelimited_2);
					int nb_line_tFileOutputDelimited_2 = 0;
					int splitEvery_tFileOutputDelimited_2 = 1000;
					int splitedFileNo_tFileOutputDelimited_2 = 0;
					int currentRow_tFileOutputDelimited_2 = 0;

					final String OUT_DELIM_tFileOutputDelimited_2 = /**
					 * Start
					 * field tFileOutputDelimited_2:FIELDSEPARATOR
					 */
					";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
					;

					final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
					 * 
					 * Start field tFileOutputDelimited_2:ROWSEPARATOR
					 */
					"\r\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
					;

					// create directory only if not exists
					if (directory_tFileOutputDelimited_2 != null
							&& directory_tFileOutputDelimited_2.trim().length() != 0) {
						java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
								directory_tFileOutputDelimited_2);
						if (!dir_tFileOutputDelimited_2.exists()) {
							dir_tFileOutputDelimited_2.mkdirs();
						}
					}

					// routines.system.Row
					java.io.Writer outtFileOutputDelimited_2 = null;

					java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(
							fileName_tFileOutputDelimited_2);
					if (fileToDelete_tFileOutputDelimited_2.exists()) {
						fileToDelete_tFileOutputDelimited_2.delete();
					}
					outtFileOutputDelimited_2 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_2,
											false), "ISO-8859-15"));
					if (filetFileOutputDelimited_2.length() == 0) {
						outtFileOutputDelimited_2.write("ID");
						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);
						outtFileOutputDelimited_2.write("NAME");
						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);
						outtFileOutputDelimited_2.write("MAILTREEID");
						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);
						outtFileOutputDelimited_2.write("TEMPLATE");
						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);
						outtFileOutputDelimited_2.write("TEMPLATEID");
						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);
						outtFileOutputDelimited_2.write("TYPE");
						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);
						outtFileOutputDelimited_2.write("CREATED_DT");
						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);
						outtFileOutputDelimited_2.write("MODIFIED_DT");
						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);
						outtFileOutputDelimited_2.write("LISTID");
						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);
						outtFileOutputDelimited_2.write("OWNERID");
						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);
						outtFileOutputDelimited_2.write("errorCode");
						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);
						outtFileOutputDelimited_2.write("errorMessage");
						outtFileOutputDelimited_2
								.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
						outtFileOutputDelimited_2.flush();
					}

					resourceMap.put("out_tFileOutputDelimited_2",
							outtFileOutputDelimited_2);
					resourceMap.put("nb_line_tFileOutputDelimited_2",
							nb_line_tFileOutputDelimited_2);

					/**
					 * [tFileOutputDelimited_2 begin ] stop
					 */

					/**
					 * [tMysqlOutput_1 begin ] start
					 */

					ok_Hash.put("tMysqlOutput_1", false);
					start_Hash
							.put("tMysqlOutput_1", System.currentTimeMillis());

					currentComponent = "tMysqlOutput_1";

					int tos_count_tMysqlOutput_1 = 0;

					int updateKeyCount_tMysqlOutput_1 = 1;
					if (updateKeyCount_tMysqlOutput_1 < 1) {
						throw new RuntimeException(
								"For update, Schema must have a key");
					}

					int nb_line_tMysqlOutput_1 = 0;
					int nb_line_update_tMysqlOutput_1 = 0;
					int nb_line_inserted_tMysqlOutput_1 = 0;
					int nb_line_deleted_tMysqlOutput_1 = 0;
					int nb_line_rejected_tMysqlOutput_1 = 0;

					int deletedCount_tMysqlOutput_1 = 0;
					int updatedCount_tMysqlOutput_1 = 0;
					int insertedCount_tMysqlOutput_1 = 0;

					int rejectedCount_tMysqlOutput_1 = 0;

					String tableName_tMysqlOutput_1 = "selligent_mails";
					boolean whetherReject_tMysqlOutput_1 = false;

					java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar
							.getInstance();
					calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
					long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1
							.getTime().getTime();
					calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
					long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1
							.getTime().getTime();
					long date_tMysqlOutput_1;

					java.sql.Connection conn_tMysqlOutput_1 = null;
					String dbProperties_tMysqlOutput_1 = "noDatetimeStringSync=true";
					String url_tMysqlOutput_1 = null;
					if (dbProperties_tMysqlOutput_1 == null
							|| dbProperties_tMysqlOutput_1.trim().length() == 0) {
						url_tMysqlOutput_1 = "jdbc:mysql://" + "localhost"
								+ ":" + "3306" + "/" + "basf" + "?"
								+ "rewriteBatchedStatements=true";
					} else {
						String properties_tMysqlOutput_1 = "noDatetimeStringSync=true";
						if (!properties_tMysqlOutput_1
								.contains("rewriteBatchedStatements")) {
							properties_tMysqlOutput_1 += "&rewriteBatchedStatements=true";
						}

						url_tMysqlOutput_1 = "jdbc:mysql://" + "localhost"
								+ ":" + "3306" + "/" + "basf" + "?"
								+ properties_tMysqlOutput_1;
					}
					String driverClass_tMysqlOutput_1 = "org.gjt.mm.mysql.Driver";

					String dbUser_tMysqlOutput_1 = "root";

					final String decryptedPassword_tMysqlOutput_1 = routines.system.PasswordEncryptUtil
							.decryptPassword("f4f7aba1746784ea");

					String dbPwd_tMysqlOutput_1 = decryptedPassword_tMysqlOutput_1;
					java.lang.Class.forName(driverClass_tMysqlOutput_1);

					conn_tMysqlOutput_1 = java.sql.DriverManager.getConnection(
							url_tMysqlOutput_1, dbUser_tMysqlOutput_1,
							dbPwd_tMysqlOutput_1);

					resourceMap.put("conn_tMysqlOutput_1", conn_tMysqlOutput_1);
					conn_tMysqlOutput_1.setAutoCommit(false);
					int commitEvery_tMysqlOutput_1 = 10000;
					int commitCounter_tMysqlOutput_1 = 0;

					int count_tMysqlOutput_1 = 0;

					java.sql.PreparedStatement pstmt_tMysqlOutput_1 = conn_tMysqlOutput_1
							.prepareStatement("SELECT COUNT(1) FROM `"
									+ "selligent_mails" + "` WHERE `ID` = ?");
					String insert_tMysqlOutput_1 = "INSERT INTO `"
							+ "selligent_mails"
							+ "` (`ID`,`NAME`,`MAILTREEID`,`TEMPLATE`,`TEMPLATEID`,`TYPE`,`CREATED_DT`,`MODIFIED_DT`,`LISTID`,`OWNERID`) VALUES (?,?,?,?,?,?,?,?,?,?)";

					java.sql.PreparedStatement pstmtInsert_tMysqlOutput_1 = conn_tMysqlOutput_1
							.prepareStatement(insert_tMysqlOutput_1);
					String update_tMysqlOutput_1 = "UPDATE `"
							+ "selligent_mails"
							+ "` SET `NAME` = ?,`MAILTREEID` = ?,`TEMPLATE` = ?,`TEMPLATEID` = ?,`TYPE` = ?,`CREATED_DT` = ?,`MODIFIED_DT` = ?,`LISTID` = ?,`OWNERID` = ? WHERE `ID` = ?";

					java.sql.PreparedStatement pstmtUpdate_tMysqlOutput_1 = conn_tMysqlOutput_1
							.prepareStatement(update_tMysqlOutput_1);

					/**
					 * [tMysqlOutput_1 begin ] stop
					 */

					/**
					 * [tMap_1 begin ] start
					 */

					ok_Hash.put("tMap_1", false);
					start_Hash.put("tMap_1", System.currentTimeMillis());

					currentComponent = "tMap_1";

					int tos_count_tMap_1 = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_1__Struct {
					}
					Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					row2Struct row2_tmp = new row2Struct();
					// ###############################

					/**
					 * [tMap_1 begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 begin ] start
					 */

					ok_Hash.put("tFileOutputDelimited_1", false);
					start_Hash.put("tFileOutputDelimited_1",
							System.currentTimeMillis());

					currentComponent = "tFileOutputDelimited_1";

					int tos_count_tFileOutputDelimited_1 = 0;

					String fileName_tFileOutputDelimited_1 = "";
					fileName_tFileOutputDelimited_1 = (new java.io.File(
							((String) globalMap
									.get("tFileList_1_CURRENT_FILEPATH"))
									+ ".file.bad")).getAbsolutePath().replace(
							"\\", "/");
					String fullName_tFileOutputDelimited_1 = null;
					String extension_tFileOutputDelimited_1 = null;
					String directory_tFileOutputDelimited_1 = null;
					if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
						if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
								.lastIndexOf("/")) {
							fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
							extension_tFileOutputDelimited_1 = "";
						} else {
							fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
									.substring(0,
											fileName_tFileOutputDelimited_1
													.lastIndexOf("."));
							extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
									.substring(fileName_tFileOutputDelimited_1
											.lastIndexOf("."));
						}
						directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("/"));
					} else {
						if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
							fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
									.substring(0,
											fileName_tFileOutputDelimited_1
													.lastIndexOf("."));
							extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
									.substring(fileName_tFileOutputDelimited_1
											.lastIndexOf("."));
						} else {
							fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
							extension_tFileOutputDelimited_1 = "";
						}
						directory_tFileOutputDelimited_1 = "";
					}
					boolean isFileGenerated_tFileOutputDelimited_1 = true;
					java.io.File filetFileOutputDelimited_1 = new java.io.File(
							fileName_tFileOutputDelimited_1);
					globalMap.put("tFileOutputDelimited_1_FILE_NAME",
							fileName_tFileOutputDelimited_1);
					int nb_line_tFileOutputDelimited_1 = 0;
					int splitEvery_tFileOutputDelimited_1 = 1000;
					int splitedFileNo_tFileOutputDelimited_1 = 0;
					int currentRow_tFileOutputDelimited_1 = 0;

					final String OUT_DELIM_tFileOutputDelimited_1 = /**
					 * Start
					 * field tFileOutputDelimited_1:FIELDSEPARATOR
					 */
					";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
					;

					final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
					 * 
					 * Start field tFileOutputDelimited_1:ROWSEPARATOR
					 */
					"\r\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
					;

					// create directory only if not exists
					if (directory_tFileOutputDelimited_1 != null
							&& directory_tFileOutputDelimited_1.trim().length() != 0) {
						java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
								directory_tFileOutputDelimited_1);
						if (!dir_tFileOutputDelimited_1.exists()) {
							dir_tFileOutputDelimited_1.mkdirs();
						}
					}

					// routines.system.Row
					java.io.Writer outtFileOutputDelimited_1 = null;

					java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(
							fileName_tFileOutputDelimited_1);
					if (fileToDelete_tFileOutputDelimited_1.exists()) {
						fileToDelete_tFileOutputDelimited_1.delete();
					}
					outtFileOutputDelimited_1 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_1,
											false), "ISO-8859-15"));
					if (filetFileOutputDelimited_1.length() == 0) {
						outtFileOutputDelimited_1.write("ID");
						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);
						outtFileOutputDelimited_1.write("NAME");
						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);
						outtFileOutputDelimited_1.write("MAILTREEID");
						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);
						outtFileOutputDelimited_1.write("TEMPLATE");
						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);
						outtFileOutputDelimited_1.write("TEMPLATEID");
						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);
						outtFileOutputDelimited_1.write("TYPE");
						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);
						outtFileOutputDelimited_1.write("CREATED_DT");
						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);
						outtFileOutputDelimited_1.write("MODIFIED_DT");
						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);
						outtFileOutputDelimited_1.write("LISTID");
						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);
						outtFileOutputDelimited_1.write("OWNERID");
						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);
						outtFileOutputDelimited_1.write("errorCode");
						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);
						outtFileOutputDelimited_1.write("errorMessage");
						outtFileOutputDelimited_1
								.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
						outtFileOutputDelimited_1.flush();
					}

					resourceMap.put("out_tFileOutputDelimited_1",
							outtFileOutputDelimited_1);
					resourceMap.put("nb_line_tFileOutputDelimited_1",
							nb_line_tFileOutputDelimited_1);

					/**
					 * [tFileOutputDelimited_1 begin ] stop
					 */

					/**
					 * [tFileInputDelimited_1 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_1", false);
					start_Hash.put("tFileInputDelimited_1",
							System.currentTimeMillis());

					currentComponent = "tFileInputDelimited_1";

					int tos_count_tFileInputDelimited_1 = 0;

					int nb_line_tFileInputDelimited_1 = 0;
					int footer_tFileInputDelimited_1 = 0;
					int totalLinetFileInputDelimited_1 = 0;
					int limittFileInputDelimited_1 = -1;
					int lastLinetFileInputDelimited_1 = -1;

					char fieldSeparator_tFileInputDelimited_1[] = null;

					// support passing value (property: Field Separator) by
					// 'context.fs' or 'globalMap.get("fs")'.
					if (((String) ";").length() > 0) {
						fieldSeparator_tFileInputDelimited_1 = ((String) ";")
								.toCharArray();
					} else {
						throw new IllegalArgumentException(
								"Field Separator must be assigned a char.");
					}

					char rowSeparator_tFileInputDelimited_1[] = null;

					// support passing value (property: Row Separator) by
					// 'context.rs' or 'globalMap.get("rs")'.
					if (((String) "\n").length() > 0) {
						rowSeparator_tFileInputDelimited_1 = ((String) "\n")
								.toCharArray();
					} else {
						throw new IllegalArgumentException(
								"Row Separator must be assigned a char.");
					}

					Object filename_tFileInputDelimited_1 = /**
					 * Start field
					 * tFileInputDelimited_1:FILENAME
					 */
					((String) globalMap.get("tFileList_1_CURRENT_FILEPATH"))/**
					 * 
					 * End field tFileInputDelimited_1:FILENAME
					 */
					;
					com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

					try {

						String[] rowtFileInputDelimited_1 = null;
						int currentLinetFileInputDelimited_1 = 0;
						int outputLinetFileInputDelimited_1 = 0;
						try {// TD110 begin
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

								int footer_value_tFileInputDelimited_1 = 0;
								if (footer_value_tFileInputDelimited_1 > 0) {
									throw new java.lang.Exception(
											"When the input source is a stream,footer shouldn't be bigger than 0.");
								}

								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_1)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_1[0]);
							}

							csvReadertFileInputDelimited_1
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('"');

							csvReadertFileInputDelimited_1
									.setEscapeChar(csvReadertFileInputDelimited_1
											.getQuoteChar());

							if (footer_tFileInputDelimited_1 > 0) {
								for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++) {
									csvReadertFileInputDelimited_1.readNext();
								}
								csvReadertFileInputDelimited_1
										.setSkipEmptyRecords(true);
								while (csvReadertFileInputDelimited_1
										.readNext()) {

									rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
											.getValues();
									if (!(rowtFileInputDelimited_1.length == 1 && ("\015")
											.equals(rowtFileInputDelimited_1[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

										totalLinetFileInputDelimited_1++;

									}

								}
								int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
										- footer_tFileInputDelimited_1 < 0 ? 0
										: totalLinetFileInputDelimited_1
												- footer_tFileInputDelimited_1;
								if (lastLinetFileInputDelimited_1 > 0) {
									lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1
											: lastLineTemptFileInputDelimited_1;
								} else {
									lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
								}

								csvReadertFileInputDelimited_1.close();
								if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
									csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
											(java.io.InputStream) filename_tFileInputDelimited_1,
											fieldSeparator_tFileInputDelimited_1[0],
											"ISO-8859-15");
								} else {
									csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
											new java.io.BufferedReader(
													new java.io.InputStreamReader(
															new java.io.FileInputStream(
																	String.valueOf(filename_tFileInputDelimited_1)),
															"ISO-8859-15")),
											fieldSeparator_tFileInputDelimited_1[0]);
								}
								csvReadertFileInputDelimited_1
										.setTrimWhitespace(false);
								if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
										&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
									csvReadertFileInputDelimited_1
											.setLineEnd(""
													+ rowSeparator_tFileInputDelimited_1[0]);

								csvReadertFileInputDelimited_1
										.setQuoteChar('"');

								csvReadertFileInputDelimited_1
										.setEscapeChar(csvReadertFileInputDelimited_1
												.getQuoteChar());

							}

							if (limittFileInputDelimited_1 != 0) {
								for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 1; currentLinetFileInputDelimited_1++) {
									csvReadertFileInputDelimited_1.readNext();
								}
							}
							csvReadertFileInputDelimited_1
									.setSkipEmptyRecords(true);

						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());

						}// TD110 end

						while (limittFileInputDelimited_1 != 0
								&& csvReadertFileInputDelimited_1 != null
								&& csvReadertFileInputDelimited_1.readNext()) {

							rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
									.getValues();

							if (rowtFileInputDelimited_1.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
								continue;
							}

							currentLinetFileInputDelimited_1++;

							if (lastLinetFileInputDelimited_1 > -1
									&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
								break;
							}
							outputLinetFileInputDelimited_1++;
							if (limittFileInputDelimited_1 > 0
									&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
								break;
							}

							row1 = null;

							row3 = null;

							boolean whetherReject_tFileInputDelimited_1 = false;
							row1 = new row1Struct();
							try {

								char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
								// support passing value (property: Field
								// Separator) by 'context.fs' or
								// 'globalMap.get("fs")'.
								if (((String) ";").length() > 0) {
									fieldSeparator_tFileInputDelimited_1_ListType = ((String) ";")
											.toCharArray();
								} else {
									throw new IllegalArgumentException(
											"Field Separator must be assigned a char.");
								}
								if (rowtFileInputDelimited_1.length == 1
										&& ("\015")
												.equals(rowtFileInputDelimited_1[0])) {// empty
																						// line
																						// when
																						// row
																						// separator
																						// is
																						// '\n'

									row1.ID = 0;

									row1.NAME = null;

									row1.MAILTREEID = null;

									row1.TEMPLATE = null;

									row1.TEMPLATEID = null;

									row1.TYPE = null;

									row1.CREATED_DT = null;

									row1.MODIFIED_DT = null;

									row1.LISTID = null;

									row1.OWNERID = null;

								} else {

									int columnIndexWithD_tFileInputDelimited_1 = 0; // Column
																					// Index

									columnIndexWithD_tFileInputDelimited_1 = 0;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
												.length() > 0) {

											row1.ID = ParserUtils
													.parseTo_int(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} else {

											throw new RuntimeException(
													"Value is empty for column : 'ID' in 'row1' connection, value is invalid or this column should be nullable or have a default value.");

										}

									} else {
										row1.ID = 0;
									}

									columnIndexWithD_tFileInputDelimited_1 = 1;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.NAME = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.NAME = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 2;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
												.length() > 0) {

											row1.MAILTREEID = ParserUtils
													.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} else {

											row1.MAILTREEID = null;

										}

									} else {
										row1.MAILTREEID = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 3;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
												.length() > 0) {

											row1.TEMPLATE = ParserUtils
													.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} else {

											row1.TEMPLATE = null;

										}

									} else {
										row1.TEMPLATE = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 4;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
												.length() > 0) {

											row1.TEMPLATEID = ParserUtils
													.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} else {

											row1.TEMPLATEID = null;

										}

									} else {
										row1.TEMPLATEID = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 5;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.TYPE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.TYPE = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 6;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
												.length() > 0) {

											row1.CREATED_DT = ParserUtils
													.parseTo_Date(
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															"dd/MM/yyyy HH:mm:ss");

										} else {

											row1.CREATED_DT = null;

										}

									} else {
										row1.CREATED_DT = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 7;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
												.length() > 0) {

											row1.MODIFIED_DT = ParserUtils
													.parseTo_Date(
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															"dd/MM/yyyy HH:mm:ss");

										} else {

											row1.MODIFIED_DT = null;

										}

									} else {
										row1.MODIFIED_DT = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 8;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
												.length() > 0) {

											row1.LISTID = ParserUtils
													.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} else {

											row1.LISTID = null;

										}

									} else {
										row1.LISTID = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 9;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
												.length() > 0) {

											row1.OWNERID = ParserUtils
													.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} else {

											row1.OWNERID = null;

										}

									} else {
										row1.OWNERID = null;
									}

								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputDelimited_1 = true;

								row3 = new row3Struct();

								row3.ID = row1.ID;

								row3.NAME = row1.NAME;

								row3.MAILTREEID = row1.MAILTREEID;

								row3.TEMPLATE = row1.TEMPLATE;

								row3.TEMPLATEID = row1.TEMPLATEID;

								row3.TYPE = row1.TYPE;

								row3.CREATED_DT = row1.CREATED_DT;

								row3.MODIFIED_DT = row1.MODIFIED_DT;

								row3.LISTID = row1.LISTID;

								row3.OWNERID = row1.OWNERID;

								row3.errorMessage = e.getMessage()
										+ " - Line: "
										+ tos_count_tFileInputDelimited_1;
								row1 = null;

							}

							/**
							 * [tFileInputDelimited_1 begin ] stop
							 */

							/**
							 * [tFileInputDelimited_1 main ] start
							 */

							currentComponent = "tFileInputDelimited_1";

							tos_count_tFileInputDelimited_1++;

							/**
							 * [tFileInputDelimited_1 main ] stop
							 */
							// Start of branch "row1"
							if (row1 != null) {

								/**
								 * [tMap_1 main ] start
								 */

								currentComponent = "tMap_1";

								boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_1 = false;
								boolean mainRowRejected_tMap_1 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
									// ###############################
									// # Output tables

									row2 = null;

									// # Output table : 'row2'
									row2_tmp.ID = row1.ID;
									row2_tmp.NAME = row1.NAME;
									row2_tmp.MAILTREEID = row1.MAILTREEID;
									row2_tmp.TEMPLATE = row1.TEMPLATE;
									row2_tmp.TEMPLATEID = row1.TEMPLATEID;
									row2_tmp.TYPE = row1.TYPE;
									row2_tmp.CREATED_DT = row1.CREATED_DT;
									row2_tmp.MODIFIED_DT = row1.MODIFIED_DT;
									row2_tmp.LISTID = row1.LISTID;
									row2_tmp.OWNERID = row1.OWNERID;
									row2 = row2_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_1 = false;

								tos_count_tMap_1++;

								/**
								 * [tMap_1 main ] stop
								 */
								// Start of branch "row2"
								if (row2 != null) {

									/**
									 * [tMysqlOutput_1 main ] start
									 */

									currentComponent = "tMysqlOutput_1";

									row4 = null;
									whetherReject_tMysqlOutput_1 = false;
									pstmt_tMysqlOutput_1.setInt(1, row2.ID);

									java.sql.ResultSet rs_tMysqlOutput_1 = pstmt_tMysqlOutput_1
											.executeQuery();
									int checkCount_tMysqlOutput_1 = -1;
									while (rs_tMysqlOutput_1.next()) {
										checkCount_tMysqlOutput_1 = rs_tMysqlOutput_1
												.getInt(1);
									}
									if (checkCount_tMysqlOutput_1 > 0) {
										if (row2.NAME == null) {
											pstmtUpdate_tMysqlOutput_1.setNull(
													1, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tMysqlOutput_1
													.setString(1, row2.NAME);
										}

										if (row2.MAILTREEID == null) {
											pstmtUpdate_tMysqlOutput_1.setNull(
													2, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tMysqlOutput_1.setInt(
													2, row2.MAILTREEID);
										}

										if (row2.TEMPLATE == null) {
											pstmtUpdate_tMysqlOutput_1.setNull(
													3, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tMysqlOutput_1.setInt(
													3, row2.TEMPLATE);
										}

										if (row2.TEMPLATEID == null) {
											pstmtUpdate_tMysqlOutput_1.setNull(
													4, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tMysqlOutput_1.setInt(
													4, row2.TEMPLATEID);
										}

										if (row2.TYPE == null) {
											pstmtUpdate_tMysqlOutput_1.setNull(
													5, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tMysqlOutput_1
													.setString(5, row2.TYPE);
										}

										if (row2.CREATED_DT != null) {
											date_tMysqlOutput_1 = row2.CREATED_DT
													.getTime();
											if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
													|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
												pstmtUpdate_tMysqlOutput_1
														.setString(6,
																"0000-00-00 00:00:00");
											} else {
												pstmtUpdate_tMysqlOutput_1
														.setTimestamp(
																6,
																new java.sql.Timestamp(
																		date_tMysqlOutput_1));
											}
										} else {
											pstmtUpdate_tMysqlOutput_1.setNull(
													6, java.sql.Types.DATE);
										}

										if (row2.MODIFIED_DT != null) {
											date_tMysqlOutput_1 = row2.MODIFIED_DT
													.getTime();
											if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
													|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
												pstmtUpdate_tMysqlOutput_1
														.setString(7,
																"0000-00-00 00:00:00");
											} else {
												pstmtUpdate_tMysqlOutput_1
														.setTimestamp(
																7,
																new java.sql.Timestamp(
																		date_tMysqlOutput_1));
											}
										} else {
											pstmtUpdate_tMysqlOutput_1.setNull(
													7, java.sql.Types.DATE);
										}

										if (row2.LISTID == null) {
											pstmtUpdate_tMysqlOutput_1.setNull(
													8, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tMysqlOutput_1.setInt(
													8, row2.LISTID);
										}

										if (row2.OWNERID == null) {
											pstmtUpdate_tMysqlOutput_1.setNull(
													9, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tMysqlOutput_1.setInt(
													9, row2.OWNERID);
										}

										pstmtUpdate_tMysqlOutput_1.setInt(
												10 + count_tMysqlOutput_1,
												row2.ID);

										try {
											updatedCount_tMysqlOutput_1 = updatedCount_tMysqlOutput_1
													+ pstmtUpdate_tMysqlOutput_1
															.executeUpdate();
											nb_line_tMysqlOutput_1++;
										} catch (java.lang.Exception e) {
											whetherReject_tMysqlOutput_1 = true;
											nb_line_tMysqlOutput_1++;
											row4 = new row4Struct();
											row4.ID = row2.ID;
											row4.NAME = row2.NAME;
											row4.MAILTREEID = row2.MAILTREEID;
											row4.TEMPLATE = row2.TEMPLATE;
											row4.TEMPLATEID = row2.TEMPLATEID;
											row4.TYPE = row2.TYPE;
											row4.CREATED_DT = row2.CREATED_DT;
											row4.MODIFIED_DT = row2.MODIFIED_DT;
											row4.LISTID = row2.LISTID;
											row4.OWNERID = row2.OWNERID;
											rejectedCount_tMysqlOutput_1 = rejectedCount_tMysqlOutput_1 + 1;
											row4.errorCode = ((java.sql.SQLException) e)
													.getSQLState();
											row4.errorMessage = e.getMessage()
													+ " - Line: "
													+ tos_count_tMysqlOutput_1;
										}
									} else {
										pstmtInsert_tMysqlOutput_1.setInt(1,
												row2.ID);

										if (row2.NAME == null) {
											pstmtInsert_tMysqlOutput_1.setNull(
													2, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tMysqlOutput_1
													.setString(2, row2.NAME);
										}

										if (row2.MAILTREEID == null) {
											pstmtInsert_tMysqlOutput_1.setNull(
													3, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tMysqlOutput_1.setInt(
													3, row2.MAILTREEID);
										}

										if (row2.TEMPLATE == null) {
											pstmtInsert_tMysqlOutput_1.setNull(
													4, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tMysqlOutput_1.setInt(
													4, row2.TEMPLATE);
										}

										if (row2.TEMPLATEID == null) {
											pstmtInsert_tMysqlOutput_1.setNull(
													5, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tMysqlOutput_1.setInt(
													5, row2.TEMPLATEID);
										}

										if (row2.TYPE == null) {
											pstmtInsert_tMysqlOutput_1.setNull(
													6, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tMysqlOutput_1
													.setString(6, row2.TYPE);
										}

										if (row2.CREATED_DT != null) {
											date_tMysqlOutput_1 = row2.CREATED_DT
													.getTime();
											if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
													|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
												pstmtInsert_tMysqlOutput_1
														.setString(7,
																"0000-00-00 00:00:00");
											} else {
												pstmtInsert_tMysqlOutput_1
														.setTimestamp(
																7,
																new java.sql.Timestamp(
																		date_tMysqlOutput_1));
											}
										} else {
											pstmtInsert_tMysqlOutput_1.setNull(
													7, java.sql.Types.DATE);
										}

										if (row2.MODIFIED_DT != null) {
											date_tMysqlOutput_1 = row2.MODIFIED_DT
													.getTime();
											if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
													|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
												pstmtInsert_tMysqlOutput_1
														.setString(8,
																"0000-00-00 00:00:00");
											} else {
												pstmtInsert_tMysqlOutput_1
														.setTimestamp(
																8,
																new java.sql.Timestamp(
																		date_tMysqlOutput_1));
											}
										} else {
											pstmtInsert_tMysqlOutput_1.setNull(
													8, java.sql.Types.DATE);
										}

										if (row2.LISTID == null) {
											pstmtInsert_tMysqlOutput_1.setNull(
													9, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tMysqlOutput_1.setInt(
													9, row2.LISTID);
										}

										if (row2.OWNERID == null) {
											pstmtInsert_tMysqlOutput_1.setNull(
													10, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tMysqlOutput_1.setInt(
													10, row2.OWNERID);
										}

										try {
											insertedCount_tMysqlOutput_1 = insertedCount_tMysqlOutput_1
													+ pstmtInsert_tMysqlOutput_1
															.executeUpdate();
											nb_line_tMysqlOutput_1++;
										} catch (java.lang.Exception e) {
											whetherReject_tMysqlOutput_1 = true;
											nb_line_tMysqlOutput_1++;
											row4 = new row4Struct();
											row4.ID = row2.ID;
											row4.NAME = row2.NAME;
											row4.MAILTREEID = row2.MAILTREEID;
											row4.TEMPLATE = row2.TEMPLATE;
											row4.TEMPLATEID = row2.TEMPLATEID;
											row4.TYPE = row2.TYPE;
											row4.CREATED_DT = row2.CREATED_DT;
											row4.MODIFIED_DT = row2.MODIFIED_DT;
											row4.LISTID = row2.LISTID;
											row4.OWNERID = row2.OWNERID;
											rejectedCount_tMysqlOutput_1 = rejectedCount_tMysqlOutput_1 + 1;
											row4.errorCode = ((java.sql.SQLException) e)
													.getSQLState();
											row4.errorMessage = e.getMessage()
													+ " - Line: "
													+ tos_count_tMysqlOutput_1;
										}
									}
									if (!whetherReject_tMysqlOutput_1) {
									}
									commitCounter_tMysqlOutput_1++;

									if (commitEvery_tMysqlOutput_1 <= commitCounter_tMysqlOutput_1) {

										conn_tMysqlOutput_1.commit();
										commitCounter_tMysqlOutput_1 = 0;

									}

									tos_count_tMysqlOutput_1++;

									/**
									 * [tMysqlOutput_1 main ] stop
									 */
									// Start of branch "row4"
									if (row4 != null) {

										/**
										 * [tFileOutputDelimited_2 main ] start
										 */

										currentComponent = "tFileOutputDelimited_2";

										StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
										sb_tFileOutputDelimited_2
												.append(row4.ID);
										sb_tFileOutputDelimited_2
												.append(OUT_DELIM_tFileOutputDelimited_2);
										if (row4.NAME != null) {
											sb_tFileOutputDelimited_2
													.append(row4.NAME);
										}
										sb_tFileOutputDelimited_2
												.append(OUT_DELIM_tFileOutputDelimited_2);
										if (row4.MAILTREEID != null) {
											sb_tFileOutputDelimited_2
													.append(row4.MAILTREEID);
										}
										sb_tFileOutputDelimited_2
												.append(OUT_DELIM_tFileOutputDelimited_2);
										if (row4.TEMPLATE != null) {
											sb_tFileOutputDelimited_2
													.append(row4.TEMPLATE);
										}
										sb_tFileOutputDelimited_2
												.append(OUT_DELIM_tFileOutputDelimited_2);
										if (row4.TEMPLATEID != null) {
											sb_tFileOutputDelimited_2
													.append(row4.TEMPLATEID);
										}
										sb_tFileOutputDelimited_2
												.append(OUT_DELIM_tFileOutputDelimited_2);
										if (row4.TYPE != null) {
											sb_tFileOutputDelimited_2
													.append(row4.TYPE);
										}
										sb_tFileOutputDelimited_2
												.append(OUT_DELIM_tFileOutputDelimited_2);
										if (row4.CREATED_DT != null) {
											sb_tFileOutputDelimited_2
													.append(FormatterUtils
															.format_Date(
																	row4.CREATED_DT,
																	"dd/MM/yyyy HH:mm:ss"));
										}
										sb_tFileOutputDelimited_2
												.append(OUT_DELIM_tFileOutputDelimited_2);
										if (row4.MODIFIED_DT != null) {
											sb_tFileOutputDelimited_2
													.append(FormatterUtils
															.format_Date(
																	row4.MODIFIED_DT,
																	"dd/MM/yyyy HH:mm:ss"));
										}
										sb_tFileOutputDelimited_2
												.append(OUT_DELIM_tFileOutputDelimited_2);
										if (row4.LISTID != null) {
											sb_tFileOutputDelimited_2
													.append(row4.LISTID);
										}
										sb_tFileOutputDelimited_2
												.append(OUT_DELIM_tFileOutputDelimited_2);
										if (row4.OWNERID != null) {
											sb_tFileOutputDelimited_2
													.append(row4.OWNERID);
										}
										sb_tFileOutputDelimited_2
												.append(OUT_DELIM_tFileOutputDelimited_2);
										if (row4.errorCode != null) {
											sb_tFileOutputDelimited_2
													.append(row4.errorCode);
										}
										sb_tFileOutputDelimited_2
												.append(OUT_DELIM_tFileOutputDelimited_2);
										if (row4.errorMessage != null) {
											sb_tFileOutputDelimited_2
													.append(row4.errorMessage);
										}
										sb_tFileOutputDelimited_2
												.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

										nb_line_tFileOutputDelimited_2++;
										resourceMap
												.put("nb_line_tFileOutputDelimited_2",
														nb_line_tFileOutputDelimited_2);

										outtFileOutputDelimited_2
												.write(sb_tFileOutputDelimited_2
														.toString());

										tos_count_tFileOutputDelimited_2++;

										/**
										 * [tFileOutputDelimited_2 main ] stop
										 */

									} // End of branch "row4"

								} // End of branch "row2"

							} // End of branch "row1"

							// Start of branch "row3"
							if (row3 != null) {

								/**
								 * [tFileOutputDelimited_1 main ] start
								 */

								currentComponent = "tFileOutputDelimited_1";

								StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
								sb_tFileOutputDelimited_1.append(row3.ID);
								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row3.NAME != null) {
									sb_tFileOutputDelimited_1.append(row3.NAME);
								}
								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row3.MAILTREEID != null) {
									sb_tFileOutputDelimited_1
											.append(row3.MAILTREEID);
								}
								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row3.TEMPLATE != null) {
									sb_tFileOutputDelimited_1
											.append(row3.TEMPLATE);
								}
								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row3.TEMPLATEID != null) {
									sb_tFileOutputDelimited_1
											.append(row3.TEMPLATEID);
								}
								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row3.TYPE != null) {
									sb_tFileOutputDelimited_1.append(row3.TYPE);
								}
								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row3.CREATED_DT != null) {
									sb_tFileOutputDelimited_1
											.append(FormatterUtils.format_Date(
													row3.CREATED_DT,
													"dd/MM/yyyy HH:mm:ss"));
								}
								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row3.MODIFIED_DT != null) {
									sb_tFileOutputDelimited_1
											.append(FormatterUtils.format_Date(
													row3.MODIFIED_DT,
													"dd/MM/yyyy HH:mm:ss"));
								}
								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row3.LISTID != null) {
									sb_tFileOutputDelimited_1
											.append(row3.LISTID);
								}
								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row3.OWNERID != null) {
									sb_tFileOutputDelimited_1
											.append(row3.OWNERID);
								}
								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row3.errorCode != null) {
									sb_tFileOutputDelimited_1
											.append(row3.errorCode);
								}
								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row3.errorMessage != null) {
									sb_tFileOutputDelimited_1
											.append(row3.errorMessage);
								}
								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

								nb_line_tFileOutputDelimited_1++;
								resourceMap.put(
										"nb_line_tFileOutputDelimited_1",
										nb_line_tFileOutputDelimited_1);

								outtFileOutputDelimited_1
										.write(sb_tFileOutputDelimited_1
												.toString());

								tos_count_tFileOutputDelimited_1++;

								/**
								 * [tFileOutputDelimited_1 main ] stop
								 */

							} // End of branch "row3"

							/**
							 * [tFileInputDelimited_1 end ] start
							 */

							currentComponent = "tFileInputDelimited_1";

							nb_line_tFileInputDelimited_1++;
						}

					} finally {
						if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
							if (csvReadertFileInputDelimited_1 != null) {
								csvReadertFileInputDelimited_1.close();
							}
						}
						if (csvReadertFileInputDelimited_1 != null) {
							globalMap.put("tFileInputDelimited_1_NB_LINE",
									nb_line_tFileInputDelimited_1);
						}

					}

					ok_Hash.put("tFileInputDelimited_1", true);
					end_Hash.put("tFileInputDelimited_1",
							System.currentTimeMillis());

					tWarn_2Process(globalMap);

					/**
					 * [tFileInputDelimited_1 end ] stop
					 */

					/**
					 * [tMap_1 end ] start
					 */

					currentComponent = "tMap_1";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					ok_Hash.put("tMap_1", true);
					end_Hash.put("tMap_1", System.currentTimeMillis());

					/**
					 * [tMap_1 end ] stop
					 */

					/**
					 * [tMysqlOutput_1 end ] start
					 */

					currentComponent = "tMysqlOutput_1";

					if (pstmtUpdate_tMysqlOutput_1 != null) {

						pstmtUpdate_tMysqlOutput_1.close();

					}
					if (pstmtInsert_tMysqlOutput_1 != null) {

						pstmtInsert_tMysqlOutput_1.close();

					}
					if (pstmt_tMysqlOutput_1 != null) {

						pstmt_tMysqlOutput_1.close();

					}

					if (commitCounter_tMysqlOutput_1 > 0) {

						conn_tMysqlOutput_1.commit();

					}

					conn_tMysqlOutput_1.close();

					resourceMap.put("finish_tMysqlOutput_1", true);

					nb_line_deleted_tMysqlOutput_1 = nb_line_deleted_tMysqlOutput_1
							+ deletedCount_tMysqlOutput_1;
					nb_line_update_tMysqlOutput_1 = nb_line_update_tMysqlOutput_1
							+ updatedCount_tMysqlOutput_1;
					nb_line_inserted_tMysqlOutput_1 = nb_line_inserted_tMysqlOutput_1
							+ insertedCount_tMysqlOutput_1;
					nb_line_rejected_tMysqlOutput_1 = nb_line_rejected_tMysqlOutput_1
							+ rejectedCount_tMysqlOutput_1;

					globalMap.put("tMysqlOutput_1_NB_LINE",
							nb_line_tMysqlOutput_1);
					globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",
							nb_line_update_tMysqlOutput_1);
					globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",
							nb_line_inserted_tMysqlOutput_1);
					globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",
							nb_line_deleted_tMysqlOutput_1);
					globalMap.put("tMysqlOutput_1_NB_LINE_REJECTED",
							nb_line_rejected_tMysqlOutput_1);

					ok_Hash.put("tMysqlOutput_1", true);
					end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

					tWarn_5Process(globalMap);

					/**
					 * [tMysqlOutput_1 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_2 end ] start
					 */

					currentComponent = "tFileOutputDelimited_2";

					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}

					globalMap.put("tFileOutputDelimited_2_NB_LINE",
							nb_line_tFileOutputDelimited_2);
					globalMap.put("tFileOutputDelimited_2_FILE_NAME",
							fileName_tFileOutputDelimited_2);

					resourceMap.put("finish_tFileOutputDelimited_2", true);

					ok_Hash.put("tFileOutputDelimited_2", true);
					end_Hash.put("tFileOutputDelimited_2",
							System.currentTimeMillis());

					tWarn_4Process(globalMap);

					/**
					 * [tFileOutputDelimited_2 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 end ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

					globalMap.put("tFileOutputDelimited_1_NB_LINE",
							nb_line_tFileOutputDelimited_1);
					globalMap.put("tFileOutputDelimited_1_FILE_NAME",
							fileName_tFileOutputDelimited_1);

					resourceMap.put("finish_tFileOutputDelimited_1", true);

					ok_Hash.put("tFileOutputDelimited_1", true);
					end_Hash.put("tFileOutputDelimited_1",
							System.currentTimeMillis());

					tWarn_3Process(globalMap);

					/**
					 * [tFileOutputDelimited_1 end ] stop
					 */

					/**
					 * [tFileList_1 end ] start
					 */

					currentComponent = "tFileList_1";

				}
				globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);

				ok_Hash.put("tFileList_1", true);
				end_Hash.put("tFileList_1", System.currentTimeMillis());

				/**
				 * [tFileList_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileList_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tWarn_7Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileList_1 finally ] start
				 */

				currentComponent = "tFileList_1";

				/**
				 * [tFileList_1 finally ] stop
				 */

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tMysqlOutput_1 finally ] start
				 */

				currentComponent = "tMysqlOutput_1";

				if (resourceMap.get("finish_tMysqlOutput_1") == null) {
					if (resourceMap.get("conn_tMysqlOutput_1") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tMysqlOutput_1")).close();

						} catch (java.sql.SQLException sqlEx_tMysqlOutput_1) {
							String errorMessage_tMysqlOutput_1 = "failed to close the connection in tMysqlOutput_1 :"
									+ sqlEx_tMysqlOutput_1.getMessage();

							System.err.println(errorMessage_tMysqlOutput_1);
						}
					}
				}

				/**
				 * [tMysqlOutput_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_2");
					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileList_1_SUBPROCESS_STATE", 1);
	}

	public void tWarn_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWarn_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tWarn_4 begin ] start
				 */

				ok_Hash.put("tWarn_4", false);
				start_Hash.put("tWarn_4", System.currentTimeMillis());

				currentComponent = "tWarn_4";

				int tos_count_tWarn_4 = 0;

				/**
				 * [tWarn_4 begin ] stop
				 */

				/**
				 * [tWarn_4 main ] start
				 */

				currentComponent = "tWarn_4";

				resumeUtil.addLog(
						"USER_DEF_LOG",
						"NODE:tWarn_4",
						"",
						Thread.currentThread().getId() + "",
						"INFO",
						"",
						"Mails Selligent | "
								+ ((String) globalMap
										.get("tFileList_1_CURRENT_FILE"))
								+ " | BDD Rejets", "", "");
				talendLogs_LOGS.addMessage(
						"tWarn",
						"tWarn_4",
						3,
						"Mails Selligent | "
								+ ((String) globalMap
										.get("tFileList_1_CURRENT_FILE"))
								+ " | BDD Rejets", ((Integer) globalMap
								.get("tFileOutputDelimited_2_NB_LINE")));
				talendLogs_LOGSProcess(globalMap);
				globalMap.put("tWarn_4_WARN_MESSAGES", "Mails Selligent | "
						+ ((String) globalMap.get("tFileList_1_CURRENT_FILE"))
						+ " | BDD Rejets");
				globalMap.put("tWarn_4_WARN_PRIORITY", 3);
				globalMap.put("tWarn_4_WARN_CODE", ((Integer) globalMap
						.get("tFileOutputDelimited_2_NB_LINE")));

				tos_count_tWarn_4++;

				/**
				 * [tWarn_4 main ] stop
				 */

				/**
				 * [tWarn_4 end ] start
				 */

				currentComponent = "tWarn_4";

				ok_Hash.put("tWarn_4", true);
				end_Hash.put("tWarn_4", System.currentTimeMillis());

				/**
				 * [tWarn_4 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_4 finally ] start
				 */

				currentComponent = "tWarn_4";

				/**
				 * [tWarn_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_4_SUBPROCESS_STATE", 1);
	}

	public void tWarn_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWarn_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tWarn_5 begin ] start
				 */

				ok_Hash.put("tWarn_5", false);
				start_Hash.put("tWarn_5", System.currentTimeMillis());

				currentComponent = "tWarn_5";

				int tos_count_tWarn_5 = 0;

				/**
				 * [tWarn_5 begin ] stop
				 */

				/**
				 * [tWarn_5 main ] start
				 */

				currentComponent = "tWarn_5";

				resumeUtil.addLog(
						"USER_DEF_LOG",
						"NODE:tWarn_5",
						"",
						Thread.currentThread().getId() + "",
						"INFO",
						"",
						"Mails Selligent | "
								+ ((String) globalMap
										.get("tFileList_1_CURRENT_FILE"))
								+ " | BDD Intégrés", "", "");
				talendLogs_LOGS.addMessage(
						"tWarn",
						"tWarn_5",
						3,
						"Mails Selligent | "
								+ ((String) globalMap
										.get("tFileList_1_CURRENT_FILE"))
								+ " | BDD Intégrés", ((Integer) globalMap
								.get("tMysqlOutput_1_NB_LINE_INSERTED")));
				talendLogs_LOGSProcess(globalMap);
				globalMap.put("tWarn_5_WARN_MESSAGES", "Mails Selligent | "
						+ ((String) globalMap.get("tFileList_1_CURRENT_FILE"))
						+ " | BDD Intégrés");
				globalMap.put("tWarn_5_WARN_PRIORITY", 3);
				globalMap.put("tWarn_5_WARN_CODE", ((Integer) globalMap
						.get("tMysqlOutput_1_NB_LINE_INSERTED")));

				tos_count_tWarn_5++;

				/**
				 * [tWarn_5 main ] stop
				 */

				/**
				 * [tWarn_5 end ] start
				 */

				currentComponent = "tWarn_5";

				ok_Hash.put("tWarn_5", true);
				end_Hash.put("tWarn_5", System.currentTimeMillis());

				tWarn_6Process(globalMap);

				/**
				 * [tWarn_5 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_5 finally ] start
				 */

				currentComponent = "tWarn_5";

				/**
				 * [tWarn_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_5_SUBPROCESS_STATE", 1);
	}

	public void tWarn_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWarn_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tWarn_6 begin ] start
				 */

				ok_Hash.put("tWarn_6", false);
				start_Hash.put("tWarn_6", System.currentTimeMillis());

				currentComponent = "tWarn_6";

				int tos_count_tWarn_6 = 0;

				/**
				 * [tWarn_6 begin ] stop
				 */

				/**
				 * [tWarn_6 main ] start
				 */

				currentComponent = "tWarn_6";

				resumeUtil.addLog(
						"USER_DEF_LOG",
						"NODE:tWarn_6",
						"",
						Thread.currentThread().getId() + "",
						"INFO",
						"",
						"Mails Selligent | "
								+ ((String) globalMap
										.get("tFileList_1_CURRENT_FILE"))
								+ " | BDD MAJ", "", "");
				talendLogs_LOGS.addMessage(
						"tWarn",
						"tWarn_6",
						3,
						"Mails Selligent | "
								+ ((String) globalMap
										.get("tFileList_1_CURRENT_FILE"))
								+ " | BDD MAJ", ((Integer) globalMap
								.get("tMysqlOutput_1_NB_LINE_UPDATED")));
				talendLogs_LOGSProcess(globalMap);
				globalMap.put("tWarn_6_WARN_MESSAGES", "Mails Selligent | "
						+ ((String) globalMap.get("tFileList_1_CURRENT_FILE"))
						+ " | BDD MAJ");
				globalMap.put("tWarn_6_WARN_PRIORITY", 3);
				globalMap.put("tWarn_6_WARN_CODE", ((Integer) globalMap
						.get("tMysqlOutput_1_NB_LINE_UPDATED")));

				tos_count_tWarn_6++;

				/**
				 * [tWarn_6 main ] stop
				 */

				/**
				 * [tWarn_6 end ] start
				 */

				currentComponent = "tWarn_6";

				ok_Hash.put("tWarn_6", true);
				end_Hash.put("tWarn_6", System.currentTimeMillis());

				/**
				 * [tWarn_6 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_6 finally ] start
				 */

				currentComponent = "tWarn_6";

				/**
				 * [tWarn_6 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_6_SUBPROCESS_STATE", 1);
	}

	public void tWarn_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWarn_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tWarn_3 begin ] start
				 */

				ok_Hash.put("tWarn_3", false);
				start_Hash.put("tWarn_3", System.currentTimeMillis());

				currentComponent = "tWarn_3";

				int tos_count_tWarn_3 = 0;

				/**
				 * [tWarn_3 begin ] stop
				 */

				/**
				 * [tWarn_3 main ] start
				 */

				currentComponent = "tWarn_3";

				resumeUtil.addLog(
						"USER_DEF_LOG",
						"NODE:tWarn_3",
						"",
						Thread.currentThread().getId() + "",
						"INFO",
						"",
						"Mails Selligent | "
								+ ((String) globalMap
										.get("tFileList_1_CURRENT_FILE"))
								+ " | Fichier Rejets", "", "");
				talendLogs_LOGS.addMessage(
						"tWarn",
						"tWarn_3",
						3,
						"Mails Selligent | "
								+ ((String) globalMap
										.get("tFileList_1_CURRENT_FILE"))
								+ " | Fichier Rejets", ((Integer) globalMap
								.get("tFileOutputDelimited_1_NB_LINE")));
				talendLogs_LOGSProcess(globalMap);
				globalMap.put("tWarn_3_WARN_MESSAGES", "Mails Selligent | "
						+ ((String) globalMap.get("tFileList_1_CURRENT_FILE"))
						+ " | Fichier Rejets");
				globalMap.put("tWarn_3_WARN_PRIORITY", 3);
				globalMap.put("tWarn_3_WARN_CODE", ((Integer) globalMap
						.get("tFileOutputDelimited_1_NB_LINE")));

				tos_count_tWarn_3++;

				/**
				 * [tWarn_3 main ] stop
				 */

				/**
				 * [tWarn_3 end ] start
				 */

				currentComponent = "tWarn_3";

				ok_Hash.put("tWarn_3", true);
				end_Hash.put("tWarn_3", System.currentTimeMillis());

				/**
				 * [tWarn_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_3 finally ] start
				 */

				currentComponent = "tWarn_3";

				/**
				 * [tWarn_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_3_SUBPROCESS_STATE", 1);
	}

	public void tWarn_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWarn_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tWarn_2 begin ] start
				 */

				ok_Hash.put("tWarn_2", false);
				start_Hash.put("tWarn_2", System.currentTimeMillis());

				currentComponent = "tWarn_2";

				int tos_count_tWarn_2 = 0;

				/**
				 * [tWarn_2 begin ] stop
				 */

				/**
				 * [tWarn_2 main ] start
				 */

				currentComponent = "tWarn_2";

				resumeUtil.addLog(
						"USER_DEF_LOG",
						"NODE:tWarn_2",
						"",
						Thread.currentThread().getId() + "",
						"INFO",
						"",
						"Mails Selligent | "
								+ ((String) globalMap
										.get("tFileList_1_CURRENT_FILE"))
								+ " | Fichier Source", "", "");
				talendLogs_LOGS.addMessage(
						"tWarn",
						"tWarn_2",
						3,
						"Mails Selligent | "
								+ ((String) globalMap
										.get("tFileList_1_CURRENT_FILE"))
								+ " | Fichier Source", ((Integer) globalMap
								.get("tFileInputDelimited_1_NB_LINE")));
				talendLogs_LOGSProcess(globalMap);
				globalMap.put("tWarn_2_WARN_MESSAGES", "Mails Selligent | "
						+ ((String) globalMap.get("tFileList_1_CURRENT_FILE"))
						+ " | Fichier Source");
				globalMap.put("tWarn_2_WARN_PRIORITY", 3);
				globalMap.put("tWarn_2_WARN_CODE", ((Integer) globalMap
						.get("tFileInputDelimited_1_NB_LINE")));

				tos_count_tWarn_2++;

				/**
				 * [tWarn_2 main ] stop
				 */

				/**
				 * [tWarn_2 end ] start
				 */

				currentComponent = "tWarn_2";

				ok_Hash.put("tWarn_2", true);
				end_Hash.put("tWarn_2", System.currentTimeMillis());

				/**
				 * [tWarn_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_2 finally ] start
				 */

				currentComponent = "tWarn_2";

				/**
				 * [tWarn_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_2_SUBPROCESS_STATE", 1);
	}

	public void tWarn_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWarn_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tWarn_7 begin ] start
				 */

				ok_Hash.put("tWarn_7", false);
				start_Hash.put("tWarn_7", System.currentTimeMillis());

				currentComponent = "tWarn_7";

				int tos_count_tWarn_7 = 0;

				/**
				 * [tWarn_7 begin ] stop
				 */

				/**
				 * [tWarn_7 main ] start
				 */

				currentComponent = "tWarn_7";

				resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_7", "", Thread
						.currentThread().getId() + "", "INFO", "",
						"[OK] Import des fichier(s) Mails Selligent ", "", "");
				talendLogs_LOGS.addMessage("tWarn", "tWarn_7", 3,
						"[OK] Import des fichier(s) Mails Selligent ", 0);
				talendLogs_LOGSProcess(globalMap);
				globalMap.put("tWarn_7_WARN_MESSAGES",
						"[OK] Import des fichier(s) Mails Selligent ");
				globalMap.put("tWarn_7_WARN_PRIORITY", 3);
				globalMap.put("tWarn_7_WARN_CODE", 0);

				tos_count_tWarn_7++;

				/**
				 * [tWarn_7 main ] stop
				 */

				/**
				 * [tWarn_7 end ] start
				 */

				currentComponent = "tWarn_7";

				ok_Hash.put("tWarn_7", true);
				end_Hash.put("tWarn_7", System.currentTimeMillis());

				tFileArchive_2Process(globalMap);

				/**
				 * [tWarn_7 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_7 finally ] start
				 */

				currentComponent = "tWarn_7";

				/**
				 * [tWarn_7 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_7_SUBPROCESS_STATE", 1);
	}

	public void tFileArchive_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileArchive_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileArchive_2 begin ] start
				 */

				ok_Hash.put("tFileArchive_2", false);
				start_Hash.put("tFileArchive_2", System.currentTimeMillis());

				currentComponent = "tFileArchive_2";

				int tos_count_tFileArchive_2 = 0;

				/**
				 * [tFileArchive_2 begin ] stop
				 */

				/**
				 * [tFileArchive_2 main ] start
				 */

				currentComponent = "tFileArchive_2";

				String sourceDir_tFileArchive_2 = context.PATH_ftp;
				String zipFile_tFileArchive_2 = context.PATH_arch
						+ "BASF_selligent_mails_"
						+ TalendDate.getDate("CCYYMMDDhhmm") + ".zip";

				com.talend.compress.zip.Zip zip_tFileArchive_2 = new com.talend.compress.zip.Zip(
						sourceDir_tFileArchive_2, zipFile_tFileArchive_2);
				zip_tFileArchive_2.setOverwriteExistTargetZip(true);
				zip_tFileArchive_2.setMakeTargetDir(true);
				int level_tFileArchive_2 = 4;
				zip_tFileArchive_2.setCompressLevel(level_tFileArchive_2);
				zip_tFileArchive_2.setAllFiles(false);
				zip_tFileArchive_2.setContainSubDir(false);
				// build filename pattern filter
				String[] patterns_tFileArchive_2 = new String[3];

				patterns_tFileArchive_2[0] = "BASF_selligent_mails_*.txt";
				patterns_tFileArchive_2[1] = "BASF_selligent_mails_*.txt.file.bad";
				patterns_tFileArchive_2[2] = "BASF_selligent_mails_*.txt.bdd.bad";
				StringBuilder sbf_tFileArchive_2 = new StringBuilder();
				sbf_tFileArchive_2.append("(");
				for (int i_tFileArchive_2 = 0; i_tFileArchive_2 < patterns_tFileArchive_2.length; i_tFileArchive_2++) {
					sbf_tFileArchive_2
							.append(patterns_tFileArchive_2[i_tFileArchive_2]
									.replaceAll("\\.", "\\\\.").replaceAll(
											"\\*", ".*"));
					if (i_tFileArchive_2 != patterns_tFileArchive_2.length - 1)
						sbf_tFileArchive_2.append("|");
				}
				sbf_tFileArchive_2.append(")");
				final String maskStr_tFileArchive_2 = new String(
						sbf_tFileArchive_2.toString());

				// apply the filter
				zip_tFileArchive_2.setNamePatternFilter(maskStr_tFileArchive_2);

				zip_tFileArchive_2.setEncoding("ISO-8859-15");
				zip_tFileArchive_2.setZip64Mode("ASNEEDED");
				zip_tFileArchive_2.setEncrypted(false);

				final String decryptedPassword_tFileArchive_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");

				zip_tFileArchive_2
						.setPassword(decryptedPassword_tFileArchive_2);
				zip_tFileArchive_2.setUseAesEncryption(false);

				zip_tFileArchive_2.doZip();

				globalMap.put("tFileArchive_2_ARCHIVE_FILEPATH",
						zipFile_tFileArchive_2);
				globalMap
						.put("tFileArchive_2_ARCHIVE_FILENAME",
								(context.PATH_arch + "BASF_selligent_mails_"
										+ TalendDate.getDate("CCYYMMDDhhmm") + ".zip")
										.contains("\\") ? (context.PATH_arch
										+ "BASF_selligent_mails_"
										+ TalendDate.getDate("CCYYMMDDhhmm") + ".zip").substring(((context.PATH_arch
										+ "BASF_selligent_mails_"
										+ TalendDate.getDate("CCYYMMDDhhmm") + ".zip")
										.lastIndexOf("\\") + 2))
										: (context.PATH_arch
												+ "BASF_selligent_mails_"
												+ TalendDate
														.getDate("CCYYMMDDhhmm") + ".zip").substring(((context.PATH_arch
												+ "BASF_selligent_mails_"
												+ TalendDate
														.getDate("CCYYMMDDhhmm") + ".zip")
												.lastIndexOf("/")) + 1));

				tos_count_tFileArchive_2++;

				/**
				 * [tFileArchive_2 main ] stop
				 */

				/**
				 * [tFileArchive_2 end ] start
				 */

				currentComponent = "tFileArchive_2";

				ok_Hash.put("tFileArchive_2", true);
				end_Hash.put("tFileArchive_2", System.currentTimeMillis());

				/**
				 * [tFileArchive_2 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileArchive_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tWarn_9Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileArchive_2 finally ] start
				 */

				currentComponent = "tFileArchive_2";

				/**
				 * [tFileArchive_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileArchive_2_SUBPROCESS_STATE", 1);
	}

	public void tWarn_9Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWarn_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tWarn_9 begin ] start
				 */

				ok_Hash.put("tWarn_9", false);
				start_Hash.put("tWarn_9", System.currentTimeMillis());

				currentComponent = "tWarn_9";

				int tos_count_tWarn_9 = 0;

				/**
				 * [tWarn_9 begin ] stop
				 */

				/**
				 * [tWarn_9 main ] start
				 */

				currentComponent = "tWarn_9";

				resumeUtil
						.addLog("USER_DEF_LOG",
								"NODE:tWarn_9",
								"",
								Thread.currentThread().getId() + "",
								"INFO",
								"",
								"[OK] Archivage des fichier(s) Mails Selligent : "
										+ ((String) globalMap
												.get("tFileArchive_2_ARCHIVE_FILENAME")),
								"", "");
				talendLogs_LOGS
						.addMessage(
								"tWarn",
								"tWarn_9",
								3,
								"[OK] Archivage des fichier(s) Mails Selligent : "
										+ ((String) globalMap
												.get("tFileArchive_2_ARCHIVE_FILENAME")),
								0);
				talendLogs_LOGSProcess(globalMap);
				globalMap
						.put("tWarn_9_WARN_MESSAGES",
								"[OK] Archivage des fichier(s) Mails Selligent : "
										+ ((String) globalMap
												.get("tFileArchive_2_ARCHIVE_FILENAME")));
				globalMap.put("tWarn_9_WARN_PRIORITY", 3);
				globalMap.put("tWarn_9_WARN_CODE", 0);

				tos_count_tWarn_9++;

				/**
				 * [tWarn_9 main ] stop
				 */

				/**
				 * [tWarn_9 end ] start
				 */

				currentComponent = "tWarn_9";

				ok_Hash.put("tWarn_9", true);
				end_Hash.put("tWarn_9", System.currentTimeMillis());

				tFileList_2Process(globalMap);

				/**
				 * [tWarn_9 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_9 finally ] start
				 */

				currentComponent = "tWarn_9";

				/**
				 * [tWarn_9 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_9_SUBPROCESS_STATE", 1);
	}

	public void tFileList_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileList_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileList_2 begin ] start
				 */

				int NB_ITERATE_tFileDelete_2 = 0; // for statistics

				ok_Hash.put("tFileList_2", false);
				start_Hash.put("tFileList_2", System.currentTimeMillis());

				currentComponent = "tFileList_2";

				int tos_count_tFileList_2 = 0;

				String directory_tFileList_2 = context.PATH_ftp;
				final java.util.List<String> maskList_tFileList_2 = new java.util.ArrayList<String>();
				final java.util.List<java.util.regex.Pattern> patternList_tFileList_2 = new java.util.ArrayList<java.util.regex.Pattern>();
				maskList_tFileList_2.add("BASF_selligent_mails_*.txt");
				maskList_tFileList_2.add("BASF_selligent_mails_*.txt.file.bad");
				maskList_tFileList_2.add("BASF_selligent_mails_*.txt.bdd.bad");
				for (final String filemask_tFileList_2 : maskList_tFileList_2) {
					String filemask_compile_tFileList_2 = filemask_tFileList_2;

					filemask_compile_tFileList_2 = org.apache.oro.text.GlobCompiler
							.globToPerl5(
									filemask_tFileList_2.toCharArray(),
									org.apache.oro.text.GlobCompiler.DEFAULT_MASK);

					java.util.regex.Pattern fileNamePattern_tFileList_2 = java.util.regex.Pattern
							.compile(filemask_compile_tFileList_2);
					patternList_tFileList_2.add(fileNamePattern_tFileList_2);
				}
				int NB_FILEtFileList_2 = 0;

				final boolean case_sensitive_tFileList_2 = true;
				final java.util.List<java.io.File> list_tFileList_2 = new java.util.ArrayList<java.io.File>();
				final java.util.Set<String> filePath_tFileList_2 = new java.util.HashSet<String>();
				java.io.File file_tFileList_2 = new java.io.File(
						directory_tFileList_2);

				file_tFileList_2.listFiles(new java.io.FilenameFilter() {
					public boolean accept(java.io.File dir, String name) {
						java.io.File file = new java.io.File(dir, name);
						if (!file.isDirectory()) {

							String fileName_tFileList_2 = file.getName();
							for (final java.util.regex.Pattern fileNamePattern_tFileList_2 : patternList_tFileList_2) {
								if (fileNamePattern_tFileList_2.matcher(
										fileName_tFileList_2).matches()) {
									if (!filePath_tFileList_2.contains(file
											.getAbsolutePath())) {
										list_tFileList_2.add(file);
										filePath_tFileList_2.add(file
												.getAbsolutePath());
									}
								}
							}
						}
						return true;
					}
				});
				java.util.Collections.sort(list_tFileList_2);

				for (int i_tFileList_2 = 0; i_tFileList_2 < list_tFileList_2
						.size(); i_tFileList_2++) {
					java.io.File files_tFileList_2 = list_tFileList_2
							.get(i_tFileList_2);
					String fileName_tFileList_2 = files_tFileList_2.getName();

					String currentFileName_tFileList_2 = files_tFileList_2
							.getName();
					String currentFilePath_tFileList_2 = files_tFileList_2
							.getAbsolutePath();
					String currentFileDirectory_tFileList_2 = files_tFileList_2
							.getParent();
					String currentFileExtension_tFileList_2 = null;

					if (files_tFileList_2.getName().contains(".")
							&& files_tFileList_2.isFile()) {
						currentFileExtension_tFileList_2 = files_tFileList_2
								.getName().substring(
										files_tFileList_2.getName()
												.lastIndexOf(".") + 1);
					} else {
						currentFileExtension_tFileList_2 = "";
					}

					NB_FILEtFileList_2++;
					globalMap.put("tFileList_2_CURRENT_FILE",
							currentFileName_tFileList_2);
					globalMap.put("tFileList_2_CURRENT_FILEPATH",
							currentFilePath_tFileList_2);
					globalMap.put("tFileList_2_CURRENT_FILEDIRECTORY",
							currentFileDirectory_tFileList_2);
					globalMap.put("tFileList_2_CURRENT_FILEEXTENSION",
							currentFileExtension_tFileList_2);
					globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);

					/**
					 * [tFileList_2 begin ] stop
					 */

					/**
					 * [tFileList_2 main ] start
					 */

					currentComponent = "tFileList_2";

					tos_count_tFileList_2++;

					/**
					 * [tFileList_2 main ] stop
					 */
					NB_ITERATE_tFileDelete_2++;

					/**
					 * [tFileDelete_2 begin ] start
					 */

					ok_Hash.put("tFileDelete_2", false);
					start_Hash.put("tFileDelete_2", System.currentTimeMillis());

					currentComponent = "tFileDelete_2";

					int tos_count_tFileDelete_2 = 0;

					/**
					 * [tFileDelete_2 begin ] stop
					 */

					/**
					 * [tFileDelete_2 main ] start
					 */

					currentComponent = "tFileDelete_2";

					class DeleteFoldertFileDelete_2 {
						/**
						 * delete all the sub-files in 'file'
						 * 
						 * @param file
						 */
						public boolean delete(java.io.File file) {
							java.io.File[] files = file.listFiles();
							for (int i = 0; i < files.length; i++) {
								if (files[i].isFile()) {
									files[i].delete();
								} else if (files[i].isDirectory()) {
									if (!files[i].delete()) {
										delete(files[i]);
									}
								}
							}
							deleteDirectory(file);
							return file.delete();
						}

						/**
						 * delete all the sub-folders in 'file'
						 * 
						 * @param file
						 */
						private void deleteDirectory(java.io.File file) {
							java.io.File[] filed = file.listFiles();
							for (int i = 0; i < filed.length; i++) {
								if (filed[i].isDirectory()) {
									deleteDirectory(filed[i]);
								}
								filed[i].delete();
							}
						}

					}
					java.io.File file_tFileDelete_2 = new java.io.File(
							((String) globalMap
									.get("tFileList_2_CURRENT_FILEPATH")));
					if (file_tFileDelete_2.exists()
							&& file_tFileDelete_2.isFile()) {
						if (file_tFileDelete_2.delete()) {
							globalMap.put("tFileDelete_2_CURRENT_STATUS",
									"File deleted.");
						} else {
							globalMap.put("tFileDelete_2_CURRENT_STATUS",
									"No file deleted.");
						}
					} else {
						globalMap.put("tFileDelete_2_CURRENT_STATUS",
								"File does not exist or is invalid.");
						throw new RuntimeException(
								"File does not exist or is invalid.");
					}
					globalMap.put("tFileDelete_2_DELETE_PATH",
							((String) globalMap
									.get("tFileList_2_CURRENT_FILEPATH")));

					tos_count_tFileDelete_2++;

					/**
					 * [tFileDelete_2 main ] stop
					 */

					/**
					 * [tFileDelete_2 end ] start
					 */

					currentComponent = "tFileDelete_2";

					ok_Hash.put("tFileDelete_2", true);
					end_Hash.put("tFileDelete_2", System.currentTimeMillis());

					/**
					 * [tFileDelete_2 end ] stop
					 */

					/**
					 * [tFileList_2 end ] start
					 */

					currentComponent = "tFileList_2";

				}
				globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);

				ok_Hash.put("tFileList_2", true);
				end_Hash.put("tFileList_2", System.currentTimeMillis());

				/**
				 * [tFileList_2 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileList_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tWarn_11Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileList_2 finally ] start
				 */

				currentComponent = "tFileList_2";

				/**
				 * [tFileList_2 finally ] stop
				 */

				/**
				 * [tFileDelete_2 finally ] start
				 */

				currentComponent = "tFileDelete_2";

				/**
				 * [tFileDelete_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileList_2_SUBPROCESS_STATE", 1);
	}

	public void tWarn_11Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWarn_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tWarn_11 begin ] start
				 */

				ok_Hash.put("tWarn_11", false);
				start_Hash.put("tWarn_11", System.currentTimeMillis());

				currentComponent = "tWarn_11";

				int tos_count_tWarn_11 = 0;

				/**
				 * [tWarn_11 begin ] stop
				 */

				/**
				 * [tWarn_11 main ] start
				 */

				currentComponent = "tWarn_11";

				resumeUtil
						.addLog("USER_DEF_LOG",
								"NODE:tWarn_11",
								"",
								Thread.currentThread().getId() + "",
								"INFO",
								"",
								"[OK] Suppression des fichier(s) Mails Selligent : "
										+ ((String) globalMap
												.get("tFileArchive_2_ARCHIVE_FILENAME")),
								"", "");
				talendLogs_LOGS
						.addMessage(
								"tWarn",
								"tWarn_11",
								3,
								"[OK] Suppression des fichier(s) Mails Selligent : "
										+ ((String) globalMap
												.get("tFileArchive_2_ARCHIVE_FILENAME")),
								0);
				talendLogs_LOGSProcess(globalMap);
				globalMap
						.put("tWarn_11_WARN_MESSAGES",
								"[OK] Suppression des fichier(s) Mails Selligent : "
										+ ((String) globalMap
												.get("tFileArchive_2_ARCHIVE_FILENAME")));
				globalMap.put("tWarn_11_WARN_PRIORITY", 3);
				globalMap.put("tWarn_11_WARN_CODE", 0);

				tos_count_tWarn_11++;

				/**
				 * [tWarn_11 main ] stop
				 */

				/**
				 * [tWarn_11 end ] start
				 */

				currentComponent = "tWarn_11";

				ok_Hash.put("tWarn_11", true);
				end_Hash.put("tWarn_11", System.currentTimeMillis());

				tWarn_13Process(globalMap);

				/**
				 * [tWarn_11 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_11 finally ] start
				 */

				currentComponent = "tWarn_11";

				/**
				 * [tWarn_11 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_11_SUBPROCESS_STATE", 1);
	}

	public void tWarn_13Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWarn_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tWarn_13 begin ] start
				 */

				ok_Hash.put("tWarn_13", false);
				start_Hash.put("tWarn_13", System.currentTimeMillis());

				currentComponent = "tWarn_13";

				int tos_count_tWarn_13 = 0;

				/**
				 * [tWarn_13 begin ] stop
				 */

				/**
				 * [tWarn_13 main ] start
				 */

				currentComponent = "tWarn_13";

				resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_13", "", Thread
						.currentThread().getId() + "", "TRACE", "",
						"----findejob----", "", "");
				talendLogs_LOGS.addMessage("tWarn", "tWarn_13", 1,
						"----findejob----", -1);
				talendLogs_LOGSProcess(globalMap);
				globalMap.put("tWarn_13_WARN_MESSAGES", "----findejob----");
				globalMap.put("tWarn_13_WARN_PRIORITY", 1);
				globalMap.put("tWarn_13_WARN_CODE", -1);

				tos_count_tWarn_13++;

				/**
				 * [tWarn_13 main ] stop
				 */

				/**
				 * [tWarn_13 end ] start
				 */

				currentComponent = "tWarn_13";

				ok_Hash.put("tWarn_13", true);
				end_Hash.put("tWarn_13", System.currentTimeMillis());

				/**
				 * [tWarn_13 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_13 finally ] start
				 */

				currentComponent = "tWarn_13";

				/**
				 * [tWarn_13 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_13_SUBPROCESS_STATE", 1);
	}

	public void tWarn_12Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWarn_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tWarn_12 begin ] start
				 */

				ok_Hash.put("tWarn_12", false);
				start_Hash.put("tWarn_12", System.currentTimeMillis());

				currentComponent = "tWarn_12";

				int tos_count_tWarn_12 = 0;

				/**
				 * [tWarn_12 begin ] stop
				 */

				/**
				 * [tWarn_12 main ] start
				 */

				currentComponent = "tWarn_12";

				resumeUtil.addLog(
						"USER_DEF_LOG",
						"NODE:tWarn_12",
						"",
						Thread.currentThread().getId() + "",
						"ERROR",
						"",
						"[KO] Archivage des fichier(s) Mails Selligent : "
								+ ((String) globalMap
										.get("tFileList_2_ERROR_MESSAGE"))
								+ " - "
								+ ((String) globalMap
										.get("tFileDelete_2_ERROR_MESSAGE")),
						"", "");
				talendLogs_LOGS
						.addMessage(
								"tWarn",
								"tWarn_12",
								5,
								"[KO] Archivage des fichier(s) Mails Selligent : "
										+ ((String) globalMap
												.get("tFileList_2_ERROR_MESSAGE"))
										+ " - "
										+ ((String) globalMap
												.get("tFileDelete_2_ERROR_MESSAGE")),
								0);
				talendLogs_LOGSProcess(globalMap);
				globalMap.put(
						"tWarn_12_WARN_MESSAGES",
						"[KO] Archivage des fichier(s) Mails Selligent : "
								+ ((String) globalMap
										.get("tFileList_2_ERROR_MESSAGE"))
								+ " - "
								+ ((String) globalMap
										.get("tFileDelete_2_ERROR_MESSAGE")));
				globalMap.put("tWarn_12_WARN_PRIORITY", 5);
				globalMap.put("tWarn_12_WARN_CODE", 0);

				tos_count_tWarn_12++;

				/**
				 * [tWarn_12 main ] stop
				 */

				/**
				 * [tWarn_12 end ] start
				 */

				currentComponent = "tWarn_12";

				ok_Hash.put("tWarn_12", true);
				end_Hash.put("tWarn_12", System.currentTimeMillis());

				/**
				 * [tWarn_12 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_12 finally ] start
				 */

				currentComponent = "tWarn_12";

				/**
				 * [tWarn_12 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_12_SUBPROCESS_STATE", 1);
	}

	public void tWarn_10Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWarn_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tWarn_10 begin ] start
				 */

				ok_Hash.put("tWarn_10", false);
				start_Hash.put("tWarn_10", System.currentTimeMillis());

				currentComponent = "tWarn_10";

				int tos_count_tWarn_10 = 0;

				/**
				 * [tWarn_10 begin ] stop
				 */

				/**
				 * [tWarn_10 main ] start
				 */

				currentComponent = "tWarn_10";

				resumeUtil.addLog(
						"USER_DEF_LOG",
						"NODE:tWarn_10",
						"",
						Thread.currentThread().getId() + "",
						"ERROR",
						"",
						"[KO] Archivage des fichier(s) Mails Selligent : "
								+ ((String) globalMap
										.get("tFileArchive_2_ERROR_MESSAGE")),
						"", "");
				talendLogs_LOGS.addMessage(
						"tWarn",
						"tWarn_10",
						5,
						"[KO] Archivage des fichier(s) Mails Selligent : "
								+ ((String) globalMap
										.get("tFileArchive_2_ERROR_MESSAGE")),
						0);
				talendLogs_LOGSProcess(globalMap);
				globalMap.put(
						"tWarn_10_WARN_MESSAGES",
						"[KO] Archivage des fichier(s) Mails Selligent : "
								+ ((String) globalMap
										.get("tFileArchive_2_ERROR_MESSAGE")));
				globalMap.put("tWarn_10_WARN_PRIORITY", 5);
				globalMap.put("tWarn_10_WARN_CODE", 0);

				tos_count_tWarn_10++;

				/**
				 * [tWarn_10 main ] stop
				 */

				/**
				 * [tWarn_10 end ] start
				 */

				currentComponent = "tWarn_10";

				ok_Hash.put("tWarn_10", true);
				end_Hash.put("tWarn_10", System.currentTimeMillis());

				/**
				 * [tWarn_10 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_10 finally ] start
				 */

				currentComponent = "tWarn_10";

				/**
				 * [tWarn_10 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_10_SUBPROCESS_STATE", 1);
	}

	public void tWarn_8Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWarn_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tWarn_8 begin ] start
				 */

				ok_Hash.put("tWarn_8", false);
				start_Hash.put("tWarn_8", System.currentTimeMillis());

				currentComponent = "tWarn_8";

				int tos_count_tWarn_8 = 0;

				/**
				 * [tWarn_8 begin ] stop
				 */

				/**
				 * [tWarn_8 main ] start
				 */

				currentComponent = "tWarn_8";

				resumeUtil
						.addLog("USER_DEF_LOG",
								"NODE:tWarn_8",
								"",
								Thread.currentThread().getId() + "",
								"ERROR",
								"",
								"[KO] Import des fichier(s) Mails Selligent : "
										+ ((String) globalMap
												.get("tFileList_1_ERROR_MESSAGE"))
										+ " - "
										+ ((String) globalMap
												.get("tFileInputDelimited_1_ERROR_MESSAGE"))
										+ " - "
										+ ((String) globalMap
												.get("tMap_1_ERROR_MESSAGE"))
										+ " - "
										+ ((String) globalMap
												.get("tMysqlOutput_1_ERROR_MESSAGE")),
								"", "");
				talendLogs_LOGS
						.addMessage(
								"tWarn",
								"tWarn_8",
								5,
								"[KO] Import des fichier(s) Mails Selligent : "
										+ ((String) globalMap
												.get("tFileList_1_ERROR_MESSAGE"))
										+ " - "
										+ ((String) globalMap
												.get("tFileInputDelimited_1_ERROR_MESSAGE"))
										+ " - "
										+ ((String) globalMap
												.get("tMap_1_ERROR_MESSAGE"))
										+ " - "
										+ ((String) globalMap
												.get("tMysqlOutput_1_ERROR_MESSAGE")),
								0);
				talendLogs_LOGSProcess(globalMap);
				globalMap
						.put("tWarn_8_WARN_MESSAGES",
								"[KO] Import des fichier(s) Mails Selligent : "
										+ ((String) globalMap
												.get("tFileList_1_ERROR_MESSAGE"))
										+ " - "
										+ ((String) globalMap
												.get("tFileInputDelimited_1_ERROR_MESSAGE"))
										+ " - "
										+ ((String) globalMap
												.get("tMap_1_ERROR_MESSAGE"))
										+ " - "
										+ ((String) globalMap
												.get("tMysqlOutput_1_ERROR_MESSAGE")));
				globalMap.put("tWarn_8_WARN_PRIORITY", 5);
				globalMap.put("tWarn_8_WARN_CODE", 0);

				tos_count_tWarn_8++;

				/**
				 * [tWarn_8 main ] stop
				 */

				/**
				 * [tWarn_8 end ] start
				 */

				currentComponent = "tWarn_8";

				ok_Hash.put("tWarn_8", true);
				end_Hash.put("tWarn_8", System.currentTimeMillis());

				/**
				 * [tWarn_8 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_8 finally ] start
				 */

				currentComponent = "tWarn_8";

				/**
				 * [tWarn_8 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_8_SUBPROCESS_STATE", 1);
	}

	public void connectionStatsLogs_CommitProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("connectionStatsLogs_Commit_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [connectionStatsLogs_Commit begin ] start
				 */

				ok_Hash.put("connectionStatsLogs_Commit", false);
				start_Hash.put("connectionStatsLogs_Commit",
						System.currentTimeMillis());

				currentComponent = "connectionStatsLogs_Commit";

				int tos_count_connectionStatsLogs_Commit = 0;

				/**
				 * [connectionStatsLogs_Commit begin ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit main ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				java.sql.Connection conn_connectionStatsLogs_Commit = (java.sql.Connection) globalMap
						.get("conn_connectionStatsLogs");

				if (conn_connectionStatsLogs_Commit != null
						&& !conn_connectionStatsLogs_Commit.isClosed()) {

					conn_connectionStatsLogs_Commit.commit();

				}

				tos_count_connectionStatsLogs_Commit++;

				/**
				 * [connectionStatsLogs_Commit main ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit end ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				ok_Hash.put("connectionStatsLogs_Commit", true);
				end_Hash.put("connectionStatsLogs_Commit",
						System.currentTimeMillis());

				/**
				 * [connectionStatsLogs_Commit end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [connectionStatsLogs_Commit finally ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				/**
				 * [connectionStatsLogs_Commit finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("connectionStatsLogs_Commit_SUBPROCESS_STATE", 1);
	}

	public void connectionStatsLogsProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("connectionStatsLogs_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [connectionStatsLogs begin ] start
				 */

				ok_Hash.put("connectionStatsLogs", false);
				start_Hash.put("connectionStatsLogs",
						System.currentTimeMillis());

				currentComponent = "connectionStatsLogs";

				int tos_count_connectionStatsLogs = 0;

				String properties_connectionStatsLogs = "noDatetimeStringSync=true";
				if (properties_connectionStatsLogs == null
						|| properties_connectionStatsLogs.trim().length() == 0) {
					properties_connectionStatsLogs += "rewriteBatchedStatements=true";
				} else if (properties_connectionStatsLogs != null
						&& !properties_connectionStatsLogs
								.contains("rewriteBatchedStatements")) {
					properties_connectionStatsLogs += "&rewriteBatchedStatements=true";
				}

				String url_connectionStatsLogs = "jdbc:mysql://" + "localhost"
						+ ":" + "3306" + "/" + "basf" + "?"
						+ properties_connectionStatsLogs;

				String dbUser_connectionStatsLogs = "root";

				final String decryptedPassword_connectionStatsLogs = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");
				String dbPwd_connectionStatsLogs = decryptedPassword_connectionStatsLogs;

				java.sql.Connection conn_connectionStatsLogs = null;

				String sharedConnectionName_connectionStatsLogs = "jdbc:mysql://localhost:3306/?noDatetimeStringSync=true"
						+ "_StatsAndLog_Shared_Connection";
				conn_connectionStatsLogs = SharedDBConnection.getDBConnection(
						"org.gjt.mm.mysql.Driver", url_connectionStatsLogs,
						dbUser_connectionStatsLogs, dbPwd_connectionStatsLogs,
						sharedConnectionName_connectionStatsLogs);
				if (null != conn_connectionStatsLogs) {

					conn_connectionStatsLogs.setAutoCommit(false);
				}

				globalMap.put("conn_connectionStatsLogs",
						conn_connectionStatsLogs);

				globalMap.put("db_connectionStatsLogs", "basf");

				/**
				 * [connectionStatsLogs begin ] stop
				 */

				/**
				 * [connectionStatsLogs main ] start
				 */

				currentComponent = "connectionStatsLogs";

				tos_count_connectionStatsLogs++;

				/**
				 * [connectionStatsLogs main ] stop
				 */

				/**
				 * [connectionStatsLogs end ] start
				 */

				currentComponent = "connectionStatsLogs";

				ok_Hash.put("connectionStatsLogs", true);
				end_Hash.put("connectionStatsLogs", System.currentTimeMillis());

				/**
				 * [connectionStatsLogs end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [connectionStatsLogs finally ] start
				 */

				currentComponent = "connectionStatsLogs";

				/**
				 * [connectionStatsLogs finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("connectionStatsLogs_SUBPROCESS_STATE", 1);
	}

	public static class row_talendLogs_DBStruct implements
			routines.system.IPersistableRow<row_talendLogs_DBStruct> {
		final static byte[] commonByteArrayLock_BASF_i0_import_selligent_mails = new byte[0];
		static byte[] commonByteArray_BASF_i0_import_selligent_mails = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASF_i0_import_selligent_mails.length) {
					if (length < 1024
							&& commonByteArray_BASF_i0_import_selligent_mails.length == 0) {
						commonByteArray_BASF_i0_import_selligent_mails = new byte[1024];
					} else {
						commonByteArray_BASF_i0_import_selligent_mails = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BASF_i0_import_selligent_mails,
						0, length);
				strReturn = new String(
						commonByteArray_BASF_i0_import_selligent_mails, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BASF_i0_import_selligent_mails) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendLogs_DBStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_talendLogs_LOGSStruct implements
			routines.system.IPersistableRow<row_talendLogs_LOGSStruct> {
		final static byte[] commonByteArrayLock_BASF_i0_import_selligent_mails = new byte[0];
		static byte[] commonByteArray_BASF_i0_import_selligent_mails = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASF_i0_import_selligent_mails.length) {
					if (length < 1024
							&& commonByteArray_BASF_i0_import_selligent_mails.length == 0) {
						commonByteArray_BASF_i0_import_selligent_mails = new byte[1024];
					} else {
						commonByteArray_BASF_i0_import_selligent_mails = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BASF_i0_import_selligent_mails,
						0, length);
				strReturn = new String(
						commonByteArray_BASF_i0_import_selligent_mails, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BASF_i0_import_selligent_mails) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendLogs_LOGSStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void talendLogs_LOGSProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_talendLogs_LOGSStruct row_talendLogs_LOGS = new row_talendLogs_LOGSStruct();
				row_talendLogs_DBStruct row_talendLogs_DB = new row_talendLogs_DBStruct();

				/**
				 * [talendLogs_CONSOLE begin ] start
				 */

				ok_Hash.put("talendLogs_CONSOLE", false);
				start_Hash
						.put("talendLogs_CONSOLE", System.currentTimeMillis());

				currentVirtualComponent = "talendLogs_CONSOLE";

				currentComponent = "talendLogs_CONSOLE";

				int tos_count_talendLogs_CONSOLE = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_talendLogs_CONSOLE = "|";
				java.io.PrintStream consoleOut_talendLogs_CONSOLE = null;

				StringBuilder strBuffer_talendLogs_CONSOLE = null;
				int nb_line_talendLogs_CONSOLE = 0;
				// /////////////////////

				/**
				 * [talendLogs_CONSOLE begin ] stop
				 */

				/**
				 * [talendLogs_DB begin ] start
				 */

				ok_Hash.put("talendLogs_DB", false);
				start_Hash.put("talendLogs_DB", System.currentTimeMillis());

				currentVirtualComponent = "talendLogs_DB";

				currentComponent = "talendLogs_DB";

				int tos_count_talendLogs_DB = 0;

				int nb_line_talendLogs_DB = 0;
				int nb_line_update_talendLogs_DB = 0;
				int nb_line_inserted_talendLogs_DB = 0;
				int nb_line_deleted_talendLogs_DB = 0;
				int nb_line_rejected_talendLogs_DB = 0;

				int deletedCount_talendLogs_DB = 0;
				int updatedCount_talendLogs_DB = 0;
				int insertedCount_talendLogs_DB = 0;

				int rejectedCount_talendLogs_DB = 0;

				String tableName_talendLogs_DB = "log_log";
				boolean whetherReject_talendLogs_DB = false;

				java.util.Calendar calendar_talendLogs_DB = java.util.Calendar
						.getInstance();
				calendar_talendLogs_DB.set(1, 0, 1, 0, 0, 0);
				long year1_talendLogs_DB = calendar_talendLogs_DB.getTime()
						.getTime();
				calendar_talendLogs_DB.set(10000, 0, 1, 0, 0, 0);
				long year10000_talendLogs_DB = calendar_talendLogs_DB.getTime()
						.getTime();
				long date_talendLogs_DB;

				java.sql.Connection conn_talendLogs_DB = null;
				conn_talendLogs_DB = (java.sql.Connection) globalMap
						.get("conn_connectionStatsLogs");

				int count_talendLogs_DB = 0;

				// [%connection%][checktable][tableName]
				String keyCheckTable_talendLogs_DB = conn_talendLogs_DB
						+ "[checktable]" + "[" + "log_log" + "]";

				if (GlobalResource.resourceMap.get(keyCheckTable_talendLogs_DB) == null) {// }

					synchronized (GlobalResource.resourceLockMap
							.get(keyCheckTable_talendLogs_DB)) {// }
						if (GlobalResource.resourceMap
								.get(keyCheckTable_talendLogs_DB) == null) {// }
							java.sql.DatabaseMetaData dbMetaData_talendLogs_DB = conn_talendLogs_DB
									.getMetaData();
							java.sql.ResultSet rsTable_talendLogs_DB = dbMetaData_talendLogs_DB
									.getTables(null, null, null,
											new String[] { "TABLE" });
							boolean whetherExist_talendLogs_DB = false;
							while (rsTable_talendLogs_DB.next()) {
								String table_talendLogs_DB = rsTable_talendLogs_DB
										.getString("TABLE_NAME");
								if (table_talendLogs_DB
										.equalsIgnoreCase("log_log")) {
									whetherExist_talendLogs_DB = true;
									break;
								}
							}
							rsTable_talendLogs_DB.close();
							if (!whetherExist_talendLogs_DB) {
								java.sql.Statement stmtCreate_talendLogs_DB = conn_talendLogs_DB
										.createStatement();
								stmtCreate_talendLogs_DB
										.execute("CREATE TABLE `"
												+ tableName_talendLogs_DB
												+ "`(`moment` DATETIME ,`pid` VARCHAR(20)  ,`root_pid` VARCHAR(20)  ,`father_pid` VARCHAR(20)  ,`project` VARCHAR(50)  ,`job` VARCHAR(255)  ,`context` VARCHAR(50)  ,`priority` INT(3)  ,`type` VARCHAR(255)  ,`origin` VARCHAR(255)  ,`message` VARCHAR(255)  ,`code` INT(3)  )");
								stmtCreate_talendLogs_DB.close();
							}
							GlobalResource.resourceMap.put(
									keyCheckTable_talendLogs_DB, true);
							// {{{
						} // end of if
					} // end synchronized
				}

				String insert_talendLogs_DB = "INSERT INTO `"
						+ "log_log"
						+ "` (`moment`,`pid`,`root_pid`,`father_pid`,`project`,`job`,`context`,`priority`,`type`,`origin`,`message`,`code`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_talendLogs_DB = null;
				// [%connection%][psmt][tableName]
				String keyPsmt_talendLogs_DB = conn_talendLogs_DB + "[psmt]"
						+ "[" + "log_log" + "]";
				pstmt_talendLogs_DB = SharedDBPreparedStatement
						.getSharedPreparedStatement(conn_talendLogs_DB,
								insert_talendLogs_DB, keyPsmt_talendLogs_DB);

				/**
				 * [talendLogs_DB begin ] stop
				 */

				/**
				 * [talendLogs_LOGS begin ] start
				 */

				ok_Hash.put("talendLogs_LOGS", false);
				start_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				currentVirtualComponent = "talendLogs_LOGS";

				currentComponent = "talendLogs_LOGS";

				int tos_count_talendLogs_LOGS = 0;

				for (LogCatcherUtils.LogCatcherMessage lcm : talendLogs_LOGS
						.getMessages()) {
					row_talendLogs_LOGS.type = lcm.getType();
					row_talendLogs_LOGS.origin = (lcm.getOrigin() == null
							|| lcm.getOrigin().length() < 1 ? null : lcm
							.getOrigin());
					row_talendLogs_LOGS.priority = lcm.getPriority();
					row_talendLogs_LOGS.message = lcm.getMessage();
					row_talendLogs_LOGS.code = lcm.getCode();

					row_talendLogs_LOGS.moment = java.util.Calendar
							.getInstance().getTime();

					row_talendLogs_LOGS.pid = pid;
					row_talendLogs_LOGS.root_pid = rootPid;
					row_talendLogs_LOGS.father_pid = fatherPid;

					row_talendLogs_LOGS.project = projectName;
					row_talendLogs_LOGS.job = jobName;
					row_talendLogs_LOGS.context = contextStr;

					/**
					 * [talendLogs_LOGS begin ] stop
					 */

					/**
					 * [talendLogs_LOGS main ] start
					 */

					currentVirtualComponent = "talendLogs_LOGS";

					currentComponent = "talendLogs_LOGS";

					tos_count_talendLogs_LOGS++;

					/**
					 * [talendLogs_LOGS main ] stop
					 */

					/**
					 * [talendLogs_DB main ] start
					 */

					currentVirtualComponent = "talendLogs_DB";

					currentComponent = "talendLogs_DB";

					row_talendLogs_DB = null;
					whetherReject_talendLogs_DB = false;
					if (row_talendLogs_LOGS.moment != null) {
						date_talendLogs_DB = row_talendLogs_LOGS.moment
								.getTime();
						if (date_talendLogs_DB < year1_talendLogs_DB
								|| date_talendLogs_DB >= year10000_talendLogs_DB) {
							pstmt_talendLogs_DB.setString(1,
									"0000-00-00 00:00:00");
						} else {
							pstmt_talendLogs_DB.setTimestamp(1,
									new java.sql.Timestamp(date_talendLogs_DB));
						}
					} else {
						pstmt_talendLogs_DB.setNull(1, java.sql.Types.DATE);
					}

					if (row_talendLogs_LOGS.pid == null) {
						pstmt_talendLogs_DB.setNull(2, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendLogs_DB.setString(2,
								row_talendLogs_LOGS.pid);
					}

					if (row_talendLogs_LOGS.root_pid == null) {
						pstmt_talendLogs_DB.setNull(3, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendLogs_DB.setString(3,
								row_talendLogs_LOGS.root_pid);
					}

					if (row_talendLogs_LOGS.father_pid == null) {
						pstmt_talendLogs_DB.setNull(4, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendLogs_DB.setString(4,
								row_talendLogs_LOGS.father_pid);
					}

					if (row_talendLogs_LOGS.project == null) {
						pstmt_talendLogs_DB.setNull(5, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendLogs_DB.setString(5,
								row_talendLogs_LOGS.project);
					}

					if (row_talendLogs_LOGS.job == null) {
						pstmt_talendLogs_DB.setNull(6, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendLogs_DB.setString(6,
								row_talendLogs_LOGS.job);
					}

					if (row_talendLogs_LOGS.context == null) {
						pstmt_talendLogs_DB.setNull(7, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendLogs_DB.setString(7,
								row_talendLogs_LOGS.context);
					}

					if (row_talendLogs_LOGS.priority == null) {
						pstmt_talendLogs_DB.setNull(8, java.sql.Types.INTEGER);
					} else {
						pstmt_talendLogs_DB.setInt(8,
								row_talendLogs_LOGS.priority);
					}

					if (row_talendLogs_LOGS.type == null) {
						pstmt_talendLogs_DB.setNull(9, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendLogs_DB.setString(9,
								row_talendLogs_LOGS.type);
					}

					if (row_talendLogs_LOGS.origin == null) {
						pstmt_talendLogs_DB.setNull(10, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendLogs_DB.setString(10,
								row_talendLogs_LOGS.origin);
					}

					if (row_talendLogs_LOGS.message == null) {
						pstmt_talendLogs_DB.setNull(11, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendLogs_DB.setString(11,
								row_talendLogs_LOGS.message);
					}

					if (row_talendLogs_LOGS.code == null) {
						pstmt_talendLogs_DB.setNull(12, java.sql.Types.INTEGER);
					} else {
						pstmt_talendLogs_DB
								.setInt(12, row_talendLogs_LOGS.code);
					}

					try {
						nb_line_talendLogs_DB++;
						insertedCount_talendLogs_DB = insertedCount_talendLogs_DB
								+ pstmt_talendLogs_DB.executeUpdate();
					} catch (java.lang.Exception e) {
						whetherReject_talendLogs_DB = true;
						System.err.print(e.getMessage());
					}
					if (!whetherReject_talendLogs_DB) {
						row_talendLogs_DB = new row_talendLogs_DBStruct();
						row_talendLogs_DB.moment = row_talendLogs_LOGS.moment;
						row_talendLogs_DB.pid = row_talendLogs_LOGS.pid;
						row_talendLogs_DB.root_pid = row_talendLogs_LOGS.root_pid;
						row_talendLogs_DB.father_pid = row_talendLogs_LOGS.father_pid;
						row_talendLogs_DB.project = row_talendLogs_LOGS.project;
						row_talendLogs_DB.job = row_talendLogs_LOGS.job;
						row_talendLogs_DB.context = row_talendLogs_LOGS.context;
						row_talendLogs_DB.priority = row_talendLogs_LOGS.priority;
						row_talendLogs_DB.type = row_talendLogs_LOGS.type;
						row_talendLogs_DB.origin = row_talendLogs_LOGS.origin;
						row_talendLogs_DB.message = row_talendLogs_LOGS.message;
						row_talendLogs_DB.code = row_talendLogs_LOGS.code;
					}

					tos_count_talendLogs_DB++;

					/**
					 * [talendLogs_DB main ] stop
					 */
					// Start of branch "row_talendLogs_DB"
					if (row_talendLogs_DB != null) {

						/**
						 * [talendLogs_CONSOLE main ] start
						 */

						currentVirtualComponent = "talendLogs_CONSOLE";

						currentComponent = "talendLogs_CONSOLE";

						// /////////////////////

						strBuffer_talendLogs_CONSOLE = new StringBuilder();

						if (row_talendLogs_DB.moment != null) { //

							strBuffer_talendLogs_CONSOLE.append(FormatterUtils
									.format_Date(row_talendLogs_DB.moment,
											"yyyy-MM-dd HH:mm:ss"));

						} //

						strBuffer_talendLogs_CONSOLE.append("|");

						if (row_talendLogs_DB.pid != null) { //

							strBuffer_talendLogs_CONSOLE.append(String
									.valueOf(row_talendLogs_DB.pid));

						} //

						strBuffer_talendLogs_CONSOLE.append("|");

						if (row_talendLogs_DB.root_pid != null) { //

							strBuffer_talendLogs_CONSOLE.append(String
									.valueOf(row_talendLogs_DB.root_pid));

						} //

						strBuffer_talendLogs_CONSOLE.append("|");

						if (row_talendLogs_DB.father_pid != null) { //

							strBuffer_talendLogs_CONSOLE.append(String
									.valueOf(row_talendLogs_DB.father_pid));

						} //

						strBuffer_talendLogs_CONSOLE.append("|");

						if (row_talendLogs_DB.project != null) { //

							strBuffer_talendLogs_CONSOLE.append(String
									.valueOf(row_talendLogs_DB.project));

						} //

						strBuffer_talendLogs_CONSOLE.append("|");

						if (row_talendLogs_DB.job != null) { //

							strBuffer_talendLogs_CONSOLE.append(String
									.valueOf(row_talendLogs_DB.job));

						} //

						strBuffer_talendLogs_CONSOLE.append("|");

						if (row_talendLogs_DB.context != null) { //

							strBuffer_talendLogs_CONSOLE.append(String
									.valueOf(row_talendLogs_DB.context));

						} //

						strBuffer_talendLogs_CONSOLE.append("|");

						if (row_talendLogs_DB.priority != null) { //

							strBuffer_talendLogs_CONSOLE.append(String
									.valueOf(row_talendLogs_DB.priority));

						} //

						strBuffer_talendLogs_CONSOLE.append("|");

						if (row_talendLogs_DB.type != null) { //

							strBuffer_talendLogs_CONSOLE.append(String
									.valueOf(row_talendLogs_DB.type));

						} //

						strBuffer_talendLogs_CONSOLE.append("|");

						if (row_talendLogs_DB.origin != null) { //

							strBuffer_talendLogs_CONSOLE.append(String
									.valueOf(row_talendLogs_DB.origin));

						} //

						strBuffer_talendLogs_CONSOLE.append("|");

						if (row_talendLogs_DB.message != null) { //

							strBuffer_talendLogs_CONSOLE.append(String
									.valueOf(row_talendLogs_DB.message));

						} //

						strBuffer_talendLogs_CONSOLE.append("|");

						if (row_talendLogs_DB.code != null) { //

							strBuffer_talendLogs_CONSOLE.append(String
									.valueOf(row_talendLogs_DB.code));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_talendLogs_CONSOLE = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_talendLogs_CONSOLE = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_talendLogs_CONSOLE);
						}
						consoleOut_talendLogs_CONSOLE
								.println(strBuffer_talendLogs_CONSOLE
										.toString());
						consoleOut_talendLogs_CONSOLE.flush();
						nb_line_talendLogs_CONSOLE++;
						// ////

						// ////

						// /////////////////////

						tos_count_talendLogs_CONSOLE++;

						/**
						 * [talendLogs_CONSOLE main ] stop
						 */

					} // End of branch "row_talendLogs_DB"

					/**
					 * [talendLogs_LOGS end ] start
					 */

					currentVirtualComponent = "talendLogs_LOGS";

					currentComponent = "talendLogs_LOGS";

				}

				ok_Hash.put("talendLogs_LOGS", true);
				end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				/**
				 * [talendLogs_LOGS end ] stop
				 */

				/**
				 * [talendLogs_DB end ] start
				 */

				currentVirtualComponent = "talendLogs_DB";

				currentComponent = "talendLogs_DB";

				if (pstmt_talendLogs_DB != null) {

					SharedDBPreparedStatement
							.releasePreparedStatement(keyPsmt_talendLogs_DB);

				}

				nb_line_deleted_talendLogs_DB = nb_line_deleted_talendLogs_DB
						+ deletedCount_talendLogs_DB;
				nb_line_update_talendLogs_DB = nb_line_update_talendLogs_DB
						+ updatedCount_talendLogs_DB;
				nb_line_inserted_talendLogs_DB = nb_line_inserted_talendLogs_DB
						+ insertedCount_talendLogs_DB;
				nb_line_rejected_talendLogs_DB = nb_line_rejected_talendLogs_DB
						+ rejectedCount_talendLogs_DB;

				globalMap.put("talendLogs_DB_NB_LINE", nb_line_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_UPDATED",
						nb_line_update_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_INSERTED",
						nb_line_inserted_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_DELETED",
						nb_line_deleted_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_REJECTED",
						nb_line_rejected_talendLogs_DB);

				ok_Hash.put("talendLogs_DB", true);
				end_Hash.put("talendLogs_DB", System.currentTimeMillis());

				/**
				 * [talendLogs_DB end ] stop
				 */

				/**
				 * [talendLogs_CONSOLE end ] start
				 */

				currentVirtualComponent = "talendLogs_CONSOLE";

				currentComponent = "talendLogs_CONSOLE";

				// ////
				// ////
				globalMap.put("talendLogs_CONSOLE_NB_LINE",
						nb_line_talendLogs_CONSOLE);

				// /////////////////////

				ok_Hash.put("talendLogs_CONSOLE", true);
				end_Hash.put("talendLogs_CONSOLE", System.currentTimeMillis());

				/**
				 * [talendLogs_CONSOLE end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:talendLogs_LOGS:sub_ok_talendLogs_connectionStatsLogs_Commit",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			connectionStatsLogs_CommitProcess(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [talendLogs_LOGS finally ] start
				 */

				currentVirtualComponent = "talendLogs_LOGS";

				currentComponent = "talendLogs_LOGS";

				/**
				 * [talendLogs_LOGS finally ] stop
				 */

				/**
				 * [talendLogs_DB finally ] start
				 */

				currentVirtualComponent = "talendLogs_DB";

				currentComponent = "talendLogs_DB";

				/**
				 * [talendLogs_DB finally ] stop
				 */

				/**
				 * [talendLogs_CONSOLE finally ] start
				 */

				currentVirtualComponent = "talendLogs_CONSOLE";

				currentComponent = "talendLogs_CONSOLE";

				/**
				 * [talendLogs_CONSOLE finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final i0_import_selligent_mails i0_import_selligent_mailsClass = new i0_import_selligent_mails();

		int exitCode = i0_import_selligent_mailsClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = i0_import_selligent_mails.class
					.getClassLoader().getResourceAsStream(
							"basf/i0_import_selligent_mails_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.PATH_ftp = (String) context.getProperty("PATH_ftp");
			context.PATH_arch = (String) context.getProperty("PATH_arch");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("PATH_ftp")) {
				context.PATH_ftp = (String) parentContextMap.get("PATH_ftp");
			}
			if (parentContextMap.containsKey("PATH_arch")) {
				context.PATH_arch = (String) parentContextMap.get("PATH_arch");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			preStaLogConProcess(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_preStaLogCon) {
			globalMap.put("preStaLogCon_SUBPROCESS_STATE", -1);

			e_preStaLogCon.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tWarn_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tWarn_1) {
			globalMap.put("tWarn_1_SUBPROCESS_STATE", -1);

			e_tWarn_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : i0_import_selligent_mails");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_connectionStatsLogs");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_connectionStatsLogs",
				globalMap.get("conn_connectionStatsLogs"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 224971 characters generated by Talend Open Studio for Data Integration on the
 * 2 octobre 2015 16:21:18 CEST
 ************************************************************************************************/
